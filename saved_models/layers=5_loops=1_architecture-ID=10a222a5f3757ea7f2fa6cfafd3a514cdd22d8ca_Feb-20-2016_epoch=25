(dp1
S'loss'
p2
ccopy_reg
_reconstructor
p3
(ctheano.tensor.var
TensorVariable
p4
c__builtin__
object
p5
NtRp6
(dp7
S'auto_name'
p8
S'auto_478'
p9
sS'index'
p10
I0
sS'tag'
p11
(itheano.gof.utils
scratchpad
p12
(dp13
S'trace'
p14
(lp15
(lp16
(S'/Users/gherka/scripts/cs231n/loopy_CNNs/code/loopy_network_lasagne.py'
p17
I281
S'_add_output'
p18
S'self.loss = loss.mean()'
tp19
aasbsS'name'
p20
S'mean'
p21
sS'owner'
p22
g3
(ctheano.gof.graph
Apply
p23
g5
NtRp24
(dp25
S'inputs'
p26
(lp27
g3
(g4
g5
NtRp28
(dp29
g8
S'auto_468'
p30
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p31
(dp32
g14
(lp33
sbsg20
Nsg22
g3
(g23
g5
NtRp34
(dp35
g26
(lp36
g3
(g4
g5
NtRp37
(dp38
g8
S'auto_467'
p39
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p40
(dp41
g14
(lp42
(lp43
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/objectives.py'
p44
I129
S'categorical_crossentropy'
p45
S'return theano.tensor.nnet.categorical_crossentropy(predictions, targets)'
tp46
aasbsg20
Nsg22
g3
(g23
g5
NtRp47
(dp48
g26
(lp49
g3
(g4
g5
NtRp50
(dp51
g8
S'auto_465'
p52
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p53
(dp54
g14
(lp55
(lp56
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p57
I43
S'softmax'
p58
S'return theano.tensor.nnet.softmax(x)'
tp59
aasbsg20
Nsg22
g3
(g23
g5
NtRp60
(dp61
g26
(lp62
g3
(g4
g5
NtRp63
(dp64
g8
S'auto_464'
p65
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p66
(dp67
g14
(lp68
(lp69
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/layers/dense.py'
p70
I90
S'get_output_for'
p71
S"activation = activation + self.b.dimshuffle('x', 0)"
tp72
aasbsg20
Nsg22
g3
(g23
g5
NtRp73
(dp74
g26
(lp75
g3
(g4
g5
NtRp76
(dp77
g8
S'auto_459'
p78
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p79
(dp80
g14
(lp81
(lp82
(g70
I88
g71
S'activation = T.dot(input, self.W)'
tp83
aasbsg20
Nsg22
g3
(g23
g5
NtRp84
(dp85
g26
(lp86
g3
(g4
g5
NtRp87
(dp88
g8
S'auto_457'
p89
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p90
(dp91
g14
(lp92
sbsg20
Nsg22
g3
(g23
g5
NtRp93
(dp94
g26
(lp95
g3
(g4
g5
NtRp96
(dp97
g8
S'auto_439'
p98
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p99
(dp100
g14
(lp101
(lp102
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/layers/pool.py'
p103
I240
g71
S'mode=self.mode,'
tp104
aasbsg20
Nsg22
g3
(g23
g5
NtRp105
(dp106
g26
(lp107
g3
(g4
g5
NtRp108
(dp109
g8
S'auto_438'
p110
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p111
(dp112
g14
(lp113
(lp114
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p115
I81
S'rectify'
p116
S'return 0.5 * (x + abs(x))'
tp117
aasbsg20
Nsg22
g3
(g23
g5
NtRp118
(dp119
g26
(lp120
g3
(g4
g5
NtRp121
(dp122
g8
S'auto_437'
p123
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p124
(dp125
g14
(lp126
(lp127
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp128
aasbsg20
Nsg22
g3
(g23
g5
NtRp129
(dp130
g26
(lp131
g3
(ctheano.tensor.var
TensorConstant
p132
g5
NtRp133
(dp134
g8
S'auto_433'
p135
sg10
Nsg11
(itheano.gof.utils
scratchpad
p136
(dp137
S'unique_value'
p138
Nsbsg20
NsS'type'
p139
g3
(ctheano.tensor.type
TensorType
p140
g5
NtRp141
(dp142
S'broadcastable'
p143
(tsS'dtype'
p144
S'float32'
p145
sS'numpy_dtype'
p146
cnumpy
dtype
p147
(S'f4'
I0
I1
tRp148
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p149
I00
sg20
NsbsS'data'
p150
cnumpy.core.multiarray
_reconstruct
p151
(cnumpy
ndarray
p152
(I0
tS'b'
tRp153
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p154
(dp155
bsS'outputs'
p156
(lp157
g121
asS'op'
p158
g3
(ctheano.tensor.elemwise
DimShuffle
p159
g5
NtRp160
(dp161
S'drop'
p162
(lp163
sS'shuffle'
p164
(lp165
sS'augment'
p166
(lp167
I0
aI1
aI2
aI3
asS'input_broadcastable'
p168
(tsS'inplace'
p169
I00
sS'new_order'
p170
(S'x'
S'x'
S'x'
S'x'
tp171
sS'_op_use_c_code'
p172
S'/usr/bin/clang++'
p173
sbsbsg139
g3
(g140
g5
NtRp174
(dp175
g143
(I01
I01
I01
I01
tp176
sg144
g145
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp177
(dp178
g8
S'auto_432'
p179
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p180
(dp181
g14
(lp182
(lp183
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp184
aasbsg20
Nsg22
g3
(g23
g5
NtRp185
(dp186
g26
(lp187
g3
(g4
g5
NtRp188
(dp189
g8
S'auto_425'
p190
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p191
(dp192
g14
(lp193
(lp194
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/layers/conv.py'
p195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp196
aasbsg20
Nsg22
g3
(g23
g5
NtRp197
(dp198
g26
(lp199
g3
(g4
g5
NtRp200
(dp201
g8
S'auto_420'
p202
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p203
(dp204
g14
(lp205
(lp206
(g195
I489
g71
S'border_mode=border_mode)'
tp207
aasbsg20
Nsg22
g3
(g23
g5
NtRp208
(dp209
g26
(lp210
g3
(g4
g5
NtRp211
(dp212
g8
S'auto_419'
p213
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p214
(dp215
g14
(lp216
(lp217
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/theano_extensions/padding.py'
p218
I53
S'pad'
p219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp220
aasbsg20
Nsg22
g3
(g23
g5
NtRp221
(dp222
g26
(lp223
g3
(g4
g5
NtRp224
(dp225
g8
S'auto_413'
p226
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p227
(dp228
g14
(lp229
(lp230
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp231
aasbsg20
Nsg22
g3
(g23
g5
NtRp232
(dp233
g26
(lp234
g3
(g132
g5
NtRp235
(dp236
g8
S'auto_48'
p237
sg10
Nsg11
(itheano.gof.utils
scratchpad
p238
(dp239
g138
Nsbsg20
NsS'cached'
p240
I01
sg139
g3
(g140
g5
NtRp241
(dp242
g143
(tsg144
S'float64'
p243
sg146
g147
(S'f8'
I0
I1
tRp244
(I3
S'<'
NNNI-1
I-1
I0
tbsg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp245
(I1
(tg244
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsbag3
(g4
g5
NtRp246
(dp247
g8
S'auto_381'
p248
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p249
(dp250
g14
(lp251
(lp252
(g218
I33
g219
S'output_shape = list(input_shape)'
tp253
aasbsg20
Nsg22
g3
(g23
g5
NtRp254
(dp255
g26
(lp256
g3
(g4
g5
NtRp257
(dp258
g8
S'auto_379'
p259
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p260
(dp261
g14
(lp262
(lp263
(g218
I30
g219
S'input_shape = x.shape'
tp264
aasbsg20
Nsg22
g3
(g23
g5
NtRp265
(dp266
g26
(lp267
g3
(g4
g5
NtRp268
(dp269
g8
S'auto_378'
p270
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p271
(dp272
g14
(lp273
(lp274
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp275
aasbsg20
Nsg22
g3
(g23
g5
NtRp276
(dp277
g26
(lp278
g3
(g4
g5
NtRp279
(dp280
g8
S'auto_377'
p281
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p282
(dp283
g14
(lp284
(lp285
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp286
aasbsg20
Nsg22
g3
(g23
g5
NtRp287
(dp288
g26
(lp289
g3
(g132
g5
NtRp290
(dp291
g8
S'auto_373'
p292
sg10
Nsg11
(itheano.gof.utils
scratchpad
p293
(dp294
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp295
(dp296
g143
(tsg144
S'float32'
p297
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp298
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p299
(dp300
bsg156
(lp301
g279
asg158
g3
(g159
g5
NtRp302
(dp303
g162
(lp304
sg164
(lp305
sg166
(lp306
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp307
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp308
(dp309
g143
(I01
I01
I01
I01
tp310
sg144
g297
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp311
(dp312
g8
S'auto_372'
p313
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p314
(dp315
g14
(lp316
(lp317
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp318
aasbsg20
Nsg22
g3
(g23
g5
NtRp319
(dp320
g26
(lp321
g3
(g4
g5
NtRp322
(dp323
g8
S'auto_365'
p324
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p325
(dp326
g14
(lp327
(lp328
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp329
aasbsg20
Nsg22
g3
(g23
g5
NtRp330
(dp331
g26
(lp332
g3
(g4
g5
NtRp333
(dp334
g8
S'auto_360'
p335
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p336
(dp337
g14
(lp338
(lp339
(g195
I489
g71
S'border_mode=border_mode)'
tp340
aasbsg20
Nsg22
g3
(g23
g5
NtRp341
(dp342
g26
(lp343
g3
(g4
g5
NtRp344
(dp345
g8
S'auto_359'
p346
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p347
(dp348
g14
(lp349
(lp350
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp351
aasbsg20
Nsg22
g3
(g23
g5
NtRp352
(dp353
g26
(lp354
g3
(g4
g5
NtRp355
(dp356
g8
S'auto_353'
p357
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p358
(dp359
g14
(lp360
(lp361
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp362
aasbsg20
Nsg22
g3
(g23
g5
NtRp363
(dp364
g26
(lp365
g235
ag3
(g4
g5
NtRp366
(dp367
g8
S'auto_321'
p368
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p369
(dp370
g14
(lp371
(lp372
(g218
I33
g219
S'output_shape = list(input_shape)'
tp373
aasbsg20
Nsg22
g3
(g23
g5
NtRp374
(dp375
g26
(lp376
g3
(g4
g5
NtRp377
(dp378
g8
S'auto_319'
p379
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p380
(dp381
g14
(lp382
(lp383
(g218
I30
g219
S'input_shape = x.shape'
tp384
aasbsg20
Nsg22
g3
(g23
g5
NtRp385
(dp386
g26
(lp387
g3
(g4
g5
NtRp388
(dp389
g8
S'auto_318'
p390
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p391
(dp392
g14
(lp393
(lp394
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp395
aasbsg20
Nsg22
g3
(g23
g5
NtRp396
(dp397
g26
(lp398
g3
(g4
g5
NtRp399
(dp400
g8
S'auto_317'
p401
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p402
(dp403
g14
(lp404
(lp405
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp406
aasbsg20
Nsg22
g3
(g23
g5
NtRp407
(dp408
g26
(lp409
g3
(g132
g5
NtRp410
(dp411
g8
S'auto_313'
p412
sg10
Nsg11
(itheano.gof.utils
scratchpad
p413
(dp414
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp415
(dp416
g143
(tsg144
S'float32'
p417
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp418
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p419
(dp420
bsg156
(lp421
g399
asg158
g3
(g159
g5
NtRp422
(dp423
g162
(lp424
sg164
(lp425
sg166
(lp426
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp427
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp428
(dp429
g143
(I01
I01
I01
I01
tp430
sg144
g417
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp431
(dp432
g8
S'auto_312'
p433
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p434
(dp435
g14
(lp436
(lp437
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp438
aasbsg20
Nsg22
g3
(g23
g5
NtRp439
(dp440
g26
(lp441
g3
(g4
g5
NtRp442
(dp443
g8
S'auto_305'
p444
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p445
(dp446
g14
(lp447
(lp448
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp449
aasbsg20
Nsg22
g3
(g23
g5
NtRp450
(dp451
g26
(lp452
g3
(g4
g5
NtRp453
(dp454
g8
S'auto_300'
p455
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p456
(dp457
g14
(lp458
(lp459
(g195
I489
g71
S'border_mode=border_mode)'
tp460
aasbsg20
Nsg22
g3
(g23
g5
NtRp461
(dp462
g26
(lp463
g3
(g4
g5
NtRp464
(dp465
g8
S'auto_299'
p466
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p467
(dp468
g14
(lp469
(lp470
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp471
aasbsg20
Nsg22
g3
(g23
g5
NtRp472
(dp473
g26
(lp474
g3
(g4
g5
NtRp475
(dp476
g8
S'auto_293'
p477
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p478
(dp479
g14
(lp480
(lp481
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp482
aasbsg20
Nsg22
g3
(g23
g5
NtRp483
(dp484
g26
(lp485
g235
ag3
(g4
g5
NtRp486
(dp487
g8
S'auto_261'
p488
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p489
(dp490
g14
(lp491
(lp492
(g218
I33
g219
S'output_shape = list(input_shape)'
tp493
aasbsg20
Nsg22
g3
(g23
g5
NtRp494
(dp495
g26
(lp496
g3
(g4
g5
NtRp497
(dp498
g8
S'auto_259'
p499
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p500
(dp501
g14
(lp502
(lp503
(g218
I30
g219
S'input_shape = x.shape'
tp504
aasbsg20
Nsg22
g3
(g23
g5
NtRp505
(dp506
g26
(lp507
g3
(g4
g5
NtRp508
(dp509
g8
S'auto_258'
p510
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p511
(dp512
g14
(lp513
(lp514
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/layers/merge.py'
p515
I78
g71
S'output = self.merge_function(output, input)'
tp516
aasbsg20
Nsg22
g3
(g23
g5
NtRp517
(dp518
g26
(lp519
g3
(g4
g5
NtRp520
(dp521
g8
S'auto_4'
p522
sg10
Nsg11
(itheano.gof.utils
scratchpad
p523
(dp524
g14
(lp525
(lp526
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/layers/input.py'
p527
I57
S'__init__'
p528
S'input_var = input_var_type(var_name)'
tp529
aasbsg20
S'input'
p530
sg22
Nsg139
g3
(g140
g5
NtRp531
(dp532
g143
(I00
I00
I00
I00
tp533
sg144
S'float64'
p534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp535
(dp536
g8
S'auto_254'
p537
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p538
(dp539
g14
(lp540
(lp541
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp542
aasbsg20
Nsg22
g3
(g23
g5
NtRp543
(dp544
g26
(lp545
g3
(g4
g5
NtRp546
(dp547
g8
S'auto_253'
p548
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p549
(dp550
g14
(lp551
(lp552
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp553
aasbsg20
Nsg22
g3
(g23
g5
NtRp554
(dp555
g26
(lp556
g3
(g132
g5
NtRp557
(dp558
g8
S'auto_249'
p559
sg10
Nsg11
(itheano.gof.utils
scratchpad
p560
(dp561
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp562
(dp563
g143
(tsg144
S'float32'
p564
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp565
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p566
(dp567
bsg156
(lp568
g546
asg158
g3
(g159
g5
NtRp569
(dp570
g162
(lp571
sg164
(lp572
sg166
(lp573
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp574
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp575
(dp576
g143
(I01
I01
I01
I01
tp577
sg144
g564
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp578
(dp579
g8
S'auto_248'
p580
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p581
(dp582
g14
(lp583
(lp584
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp585
aasbsg20
Nsg22
g3
(g23
g5
NtRp586
(dp587
g26
(lp588
g3
(g4
g5
NtRp589
(dp590
g8
S'auto_241'
p591
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p592
(dp593
g14
(lp594
(lp595
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp596
aasbsg20
Nsg22
g3
(g23
g5
NtRp597
(dp598
g26
(lp599
g3
(g4
g5
NtRp600
(dp601
g8
S'auto_236'
p602
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p603
(dp604
g14
(lp605
(lp606
(g195
I489
g71
S'border_mode=border_mode)'
tp607
aasbsg20
Nsg22
g3
(g23
g5
NtRp608
(dp609
g26
(lp610
g3
(g4
g5
NtRp611
(dp612
g8
S'auto_235'
p613
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p614
(dp615
g14
(lp616
(lp617
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp618
aasbsg20
Nsg22
g3
(g23
g5
NtRp619
(dp620
g26
(lp621
g3
(g4
g5
NtRp622
(dp623
g8
S'auto_229'
p624
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p625
(dp626
g14
(lp627
(lp628
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp629
aasbsg20
Nsg22
g3
(g23
g5
NtRp630
(dp631
g26
(lp632
g235
ag3
(g4
g5
NtRp633
(dp634
g8
S'auto_197'
p635
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p636
(dp637
g14
(lp638
(lp639
(g218
I33
g219
S'output_shape = list(input_shape)'
tp640
aasbsg20
Nsg22
g3
(g23
g5
NtRp641
(dp642
g26
(lp643
g3
(g4
g5
NtRp644
(dp645
g8
S'auto_195'
p646
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p647
(dp648
g14
(lp649
(lp650
(g218
I30
g219
S'input_shape = x.shape'
tp651
aasbsg20
Nsg22
g3
(g23
g5
NtRp652
(dp653
g26
(lp654
g3
(g4
g5
NtRp655
(dp656
g8
S'auto_194'
p657
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p658
(dp659
g14
(lp660
(lp661
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp662
aasbsg20
Nsg22
g3
(g23
g5
NtRp663
(dp664
g26
(lp665
g3
(g4
g5
NtRp666
(dp667
g8
S'auto_193'
p668
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p669
(dp670
g14
(lp671
(lp672
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp673
aasbsg20
Nsg22
g3
(g23
g5
NtRp674
(dp675
g26
(lp676
g3
(g132
g5
NtRp677
(dp678
g8
S'auto_189'
p679
sg10
Nsg11
(itheano.gof.utils
scratchpad
p680
(dp681
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp682
(dp683
g143
(tsg144
S'float32'
p684
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp685
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p686
(dp687
bsg156
(lp688
g666
asg158
g3
(g159
g5
NtRp689
(dp690
g162
(lp691
sg164
(lp692
sg166
(lp693
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp694
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp695
(dp696
g143
(I01
I01
I01
I01
tp697
sg144
g684
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp698
(dp699
g8
S'auto_188'
p700
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p701
(dp702
g14
(lp703
(lp704
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp705
aasbsg20
Nsg22
g3
(g23
g5
NtRp706
(dp707
g26
(lp708
g3
(g4
g5
NtRp709
(dp710
g8
S'auto_181'
p711
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p712
(dp713
g14
(lp714
(lp715
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp716
aasbsg20
Nsg22
g3
(g23
g5
NtRp717
(dp718
g26
(lp719
g3
(g4
g5
NtRp720
(dp721
g8
S'auto_176'
p722
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p723
(dp724
g14
(lp725
(lp726
(g195
I489
g71
S'border_mode=border_mode)'
tp727
aasbsg20
Nsg22
g3
(g23
g5
NtRp728
(dp729
g26
(lp730
g3
(g4
g5
NtRp731
(dp732
g8
S'auto_175'
p733
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p734
(dp735
g14
(lp736
(lp737
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp738
aasbsg20
Nsg22
g3
(g23
g5
NtRp739
(dp740
g26
(lp741
g3
(g4
g5
NtRp742
(dp743
g8
S'auto_169'
p744
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p745
(dp746
g14
(lp747
(lp748
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp749
aasbsg20
Nsg22
g3
(g23
g5
NtRp750
(dp751
g26
(lp752
g235
ag3
(g4
g5
NtRp753
(dp754
g8
S'auto_137'
p755
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p756
(dp757
g14
(lp758
(lp759
(g218
I33
g219
S'output_shape = list(input_shape)'
tp760
aasbsg20
Nsg22
g3
(g23
g5
NtRp761
(dp762
g26
(lp763
g3
(g4
g5
NtRp764
(dp765
g8
S'auto_135'
p766
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p767
(dp768
g14
(lp769
(lp770
(g218
I30
g219
S'input_shape = x.shape'
tp771
aasbsg20
Nsg22
g3
(g23
g5
NtRp772
(dp773
g26
(lp774
g3
(g4
g5
NtRp775
(dp776
g8
S'auto_134'
p777
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p778
(dp779
g14
(lp780
(lp781
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp782
aasbsg20
Nsg22
g3
(g23
g5
NtRp783
(dp784
g26
(lp785
g3
(g4
g5
NtRp786
(dp787
g8
S'auto_133'
p788
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p789
(dp790
g14
(lp791
(lp792
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp793
aasbsg20
Nsg22
g3
(g23
g5
NtRp794
(dp795
g26
(lp796
g3
(g132
g5
NtRp797
(dp798
g8
S'auto_129'
p799
sg10
Nsg11
(itheano.gof.utils
scratchpad
p800
(dp801
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp802
(dp803
g143
(tsg144
S'float32'
p804
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp805
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p806
(dp807
bsg156
(lp808
g786
asg158
g3
(g159
g5
NtRp809
(dp810
g162
(lp811
sg164
(lp812
sg166
(lp813
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp814
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp815
(dp816
g143
(I01
I01
I01
I01
tp817
sg144
g804
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp818
(dp819
g8
S'auto_128'
p820
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p821
(dp822
g14
(lp823
(lp824
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp825
aasbsg20
Nsg22
g3
(g23
g5
NtRp826
(dp827
g26
(lp828
g3
(g4
g5
NtRp829
(dp830
g8
S'auto_121'
p831
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p832
(dp833
g14
(lp834
(lp835
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp836
aasbsg20
Nsg22
g3
(g23
g5
NtRp837
(dp838
g26
(lp839
g3
(g4
g5
NtRp840
(dp841
g8
S'auto_116'
p842
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p843
(dp844
g14
(lp845
(lp846
(g195
I489
g71
S'border_mode=border_mode)'
tp847
aasbsg20
Nsg22
g3
(g23
g5
NtRp848
(dp849
g26
(lp850
g3
(g4
g5
NtRp851
(dp852
g8
S'auto_115'
p853
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p854
(dp855
g14
(lp856
(lp857
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp858
aasbsg20
Nsg22
g3
(g23
g5
NtRp859
(dp860
g26
(lp861
g3
(g4
g5
NtRp862
(dp863
g8
S'auto_109'
p864
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p865
(dp866
g14
(lp867
(lp868
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp869
aasbsg20
Nsg22
g3
(g23
g5
NtRp870
(dp871
g26
(lp872
g235
ag3
(g4
g5
NtRp873
(dp874
g8
S'auto_77'
p875
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p876
(dp877
g14
(lp878
(lp879
(g218
I33
g219
S'output_shape = list(input_shape)'
tp880
aasbsg20
Nsg22
g3
(g23
g5
NtRp881
(dp882
g26
(lp883
g3
(g4
g5
NtRp884
(dp885
g8
S'auto_75'
p886
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p887
(dp888
g14
(lp889
(lp890
(g218
I30
g219
S'input_shape = x.shape'
tp891
aasbsg20
Nsg22
g3
(g23
g5
NtRp892
(dp893
g26
(lp894
g3
(g4
g5
NtRp895
(dp896
g8
S'auto_74'
p897
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p898
(dp899
g14
(lp900
(lp901
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp902
aasbsg20
Nsg22
g3
(g23
g5
NtRp903
(dp904
g26
(lp905
g3
(g4
g5
NtRp906
(dp907
g8
S'auto_73'
p908
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p909
(dp910
g14
(lp911
(lp912
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp913
aasbsg20
Nsg22
g3
(g23
g5
NtRp914
(dp915
g26
(lp916
g3
(g132
g5
NtRp917
(dp918
g8
S'auto_69'
p919
sg10
Nsg11
(itheano.gof.utils
scratchpad
p920
(dp921
g138
Nsbsg20
Nsg139
g3
(g140
g5
NtRp922
(dp923
g143
(tsg144
S'float32'
p924
sg146
g148
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp925
(I1
(tg148
I00
S'\x00\x00\x00?'
tbsbasg11
(itheano.gof.utils
scratchpad
p926
(dp927
bsg156
(lp928
g906
asg158
g3
(g159
g5
NtRp929
(dp930
g162
(lp931
sg164
(lp932
sg166
(lp933
I0
aI1
aI2
aI3
asg168
(tsg169
I00
sg170
(S'x'
S'x'
S'x'
S'x'
tp934
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp935
(dp936
g143
(I01
I01
I01
I01
tp937
sg144
g924
sg146
g148
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp938
(dp939
g8
S'auto_68'
p940
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p941
(dp942
g14
(lp943
(lp944
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp945
aasbsg20
Nsg22
g3
(g23
g5
NtRp946
(dp947
g26
(lp948
g3
(g4
g5
NtRp949
(dp950
g8
S'auto_61'
p951
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p952
(dp953
g14
(lp954
(lp955
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp956
aasbsg20
Nsg22
g3
(g23
g5
NtRp957
(dp958
g26
(lp959
g3
(g4
g5
NtRp960
(dp961
g8
S'auto_56'
p962
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p963
(dp964
g14
(lp965
(lp966
(g195
I489
g71
S'border_mode=border_mode)'
tp967
aasbsg20
Nsg22
g3
(g23
g5
NtRp968
(dp969
g26
(lp970
g3
(g4
g5
NtRp971
(dp972
g8
S'auto_55'
p973
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p974
(dp975
g14
(lp976
(lp977
(g218
I53
g219
S'return T.set_subtensor(out[tuple(indices)], x)'
tp978
aasbsg20
Nsg22
g3
(g23
g5
NtRp979
(dp980
g26
(lp981
g3
(g4
g5
NtRp982
(dp983
g8
S'auto_49'
p984
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p985
(dp986
g14
(lp987
(lp988
(g218
I52
g219
S'out = T.zeros(output_shape)'
tp989
aasbsg20
Nsg22
g3
(g23
g5
NtRp990
(dp991
g26
(lp992
g235
ag3
(g4
g5
NtRp993
(dp994
g8
S'auto_17'
p995
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p996
(dp997
g14
(lp998
(lp999
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1000
aasbsg20
Nsg22
g3
(g23
g5
NtRp1001
(dp1002
g26
(lp1003
g3
(g4
g5
NtRp1004
(dp1005
g8
S'auto_15'
p1006
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1007
(dp1008
g14
(lp1009
(lp1010
(g218
I30
g219
S'input_shape = x.shape'
tp1011
aasbsg20
Nsg22
g3
(g23
g5
NtRp1012
(dp1013
g26
(lp1014
g520
asg11
(itheano.gof.utils
scratchpad
p1015
(dp1016
bsg156
(lp1017
g1004
asg158
g3
(ctheano.compile.ops
Shape
p1018
g5
NtRp1019
(dp1020
g172
g173
sbsbsg139
g3
(g140
g5
NtRp1021
(dp1022
g143
(I00
tp1023
sg144
S'int64'
p1024
sg146
g147
(S'i8'
I0
I1
tRp1025
(I3
S'<'
NNNI-1
I-1
I0
tbsg149
I00
sg20
Nsbsbag3
(ctheano.scalar.basic
ScalarConstant
p1026
g5
NtRp1027
(dp1028
g8
S'auto_16'
p1029
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1030
(dp1031
bsg20
Nsg139
g3
(ctheano.scalar.basic
Scalar
p1032
g5
NtRp1033
(dp1034
g144
g1024
sbsg150
cnumpy.core.multiarray
scalar
p1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1036
sbasg11
(itheano.gof.utils
scratchpad
p1037
(dp1038
bsg156
(lp1039
g993
asg158
g3
(ctheano.tensor.subtensor
Subtensor
p1040
g5
NtRp1041
(dp1042
S'idx_list'
p1043
(g1033
tp1044
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1045
(dp1046
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1047
(dp1048
g8
S'auto_19'
p1049
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1050
(dp1051
g14
(lp1052
(lp1053
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1054
aasbsg20
Nsg22
g3
(g23
g5
NtRp1055
(dp1056
g26
(lp1057
g1004
ag3
(g1026
g5
NtRp1058
(dp1059
g8
S'auto_18'
p1060
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1061
(dp1062
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1063
sbasg11
(itheano.gof.utils
scratchpad
p1064
(dp1065
bsg156
(lp1066
g1047
asg158
g3
(g1040
g5
NtRp1067
(dp1068
g1043
(g1033
tp1069
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1070
(dp1071
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1072
(dp1073
g8
S'auto_28'
p1074
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1075
(dp1076
g14
(lp1077
(lp1078
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1079
aasbsg20
Nsg22
g3
(g23
g5
NtRp1080
(dp1081
g26
(lp1082
g3
(g4
g5
NtRp1083
(dp1084
g8
S'auto_21'
p1085
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1086
(dp1087
g14
(lp1088
(lp1089
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1090
aasbsg20
Nsg22
g3
(g23
g5
NtRp1091
(dp1092
g26
(lp1093
g1004
ag3
(g1026
g5
NtRp1094
(dp1095
g8
S'auto_20'
p1096
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1097
(dp1098
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp1099
sbasg11
(itheano.gof.utils
scratchpad
p1100
(dp1101
bsg156
(lp1102
g1083
asg158
g3
(g1040
g5
NtRp1103
(dp1104
g1043
(g1033
tp1105
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1106
(dp1107
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g132
g5
NtRp1108
(dp1109
g8
S'auto_24'
p1110
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1111
(dp1112
g138
Nsbsg20
Nsg240
I01
sg139
g3
(g140
g5
NtRp1113
(dp1114
g143
(tsg144
S'int8'
p1115
sg146
g147
(S'i1'
I0
I1
tRp1116
(I3
S'|'
NNNI-1
I-1
I0
tbsg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp1117
(I1
(tg1116
I00
S'\x02'
tbsbasg11
(itheano.gof.utils
scratchpad
p1118
(dp1119
bsg156
(lp1120
g1072
asg158
g3
(ctheano.tensor.elemwise
Elemwise
p1121
g5
NtRp1122
(dp1123
S'__module__'
p1124
S'tensor'
p1125
sS'scalar_op'
p1126
g3
(ctheano.scalar.basic
Add
p1127
g5
NtRp1128
(dp1129
S'output_types_preference'
p1130
ctheano.scalar.basic
upcast_out
p1131
sg172
g173
sg20
S'add'
p1132
sbsg20
S'Elemwise{add,no_inplace}'
p1133
sg172
g173
sS'destroy_map'
p1134
(dp1135
sS'nfunc_spec'
p1136
(S'add'
I2
I1
tp1137
sS'inplace_pattern'
p1138
(dp1139
sS'openmp'
p1140
I00
sS'__doc__'
p1141
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p1142
sbsbsg139
g3
(g140
g5
NtRp1143
(dp1144
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1145
(dp1146
g8
S'auto_40'
p1147
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1148
(dp1149
g14
(lp1150
(lp1151
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1152
aasbsg20
Nsg22
g3
(g23
g5
NtRp1153
(dp1154
g26
(lp1155
g3
(g4
g5
NtRp1156
(dp1157
g8
S'auto_23'
p1158
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1159
(dp1160
g14
(lp1161
(lp1162
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1163
aasbsg20
Nsg22
g3
(g23
g5
NtRp1164
(dp1165
g26
(lp1166
g1004
ag3
(g1026
g5
NtRp1167
(dp1168
g8
S'auto_22'
p1169
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1170
(dp1171
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp1172
sbasg11
(itheano.gof.utils
scratchpad
p1173
(dp1174
bsg156
(lp1175
g1156
asg158
g3
(g1040
g5
NtRp1176
(dp1177
g1043
(g1033
tp1178
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1179
(dp1180
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p1181
(dp1182
bsg156
(lp1183
g1145
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1184
(dp1185
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1186
(dp1187
bsg156
(lp1188
g982
asg158
g3
(ctheano.tensor.basic
Alloc
p1189
g5
NtRp1190
(dp1191
g172
g173
sbsbsg139
g3
(g140
g5
NtRp1192
(dp1193
g143
(I00
I00
I00
I00
tp1194
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag520
ag3
(g1026
g5
NtRp1195
(dp1196
g8
S'auto_50'
p1197
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1198
(dp1199
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1200
sbag3
(ctheano.scalar.basic
ScalarVariable
p1201
g5
NtRp1202
(dp1203
g8
S'auto_52'
p1204
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1205
(dp1206
bsg20
Nsg22
g3
(g23
g5
NtRp1207
(dp1208
g26
(lp1209
g3
(g4
g5
NtRp1210
(dp1211
g8
S'auto_35'
p1212
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1213
(dp1214
g14
(lp1215
(lp1216
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1217
aasbsg20
Nsg22
g3
(g23
g5
NtRp1218
(dp1219
g26
(lp1220
g3
(g132
g5
NtRp1221
(dp1222
g8
S'auto_31'
p1223
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1224
(dp1225
g138
Nsbsg20
Nsg240
I01
sg139
g3
(g140
g5
NtRp1226
(dp1227
g143
(tsg144
S'int8'
p1228
sg146
g1116
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp1229
(I1
(tg1116
I00
S'\x01'
tbsbag3
(g4
g5
NtRp1230
(dp1231
g8
S'auto_30'
p1232
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1233
(dp1234
g14
(lp1235
(lp1236
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1237
aasbsg20
Nsg22
g3
(g23
g5
NtRp1238
(dp1239
g26
(lp1240
g1004
ag3
(g1026
g5
NtRp1241
(dp1242
g8
S'auto_29'
p1243
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1244
(dp1245
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp1246
sbasg11
(itheano.gof.utils
scratchpad
p1247
(dp1248
bsg156
(lp1249
g1230
asg158
g3
(g1040
g5
NtRp1250
(dp1251
g1043
(g1033
tp1252
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1253
(dp1254
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1255
(dp1256
bsg156
(lp1257
g1210
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1258
(dp1259
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1260
(dp1261
bsg156
(lp1262
g1202
asg158
g3
(ctheano.tensor.basic
ScalarFromTensor
p1263
g5
NtRp1264
(dp1265
g172
g173
sbsbsg139
g1033
sbag3
(g1026
g5
NtRp1266
(dp1267
g8
S'auto_51'
p1268
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1269
(dp1270
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1271
sbag3
(g1201
g5
NtRp1272
(dp1273
g8
S'auto_53'
p1274
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1275
(dp1276
bsg20
Nsg22
g3
(g23
g5
NtRp1277
(dp1278
g26
(lp1279
g3
(g4
g5
NtRp1280
(dp1281
g8
S'auto_47'
p1282
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1283
(dp1284
g14
(lp1285
(lp1286
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1287
aasbsg20
Nsg22
g3
(g23
g5
NtRp1288
(dp1289
g26
(lp1290
g1221
ag3
(g4
g5
NtRp1291
(dp1292
g8
S'auto_42'
p1293
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1294
(dp1295
g14
(lp1296
(lp1297
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1298
aasbsg20
Nsg22
g3
(g23
g5
NtRp1299
(dp1300
g26
(lp1301
g1004
ag3
(g1026
g5
NtRp1302
(dp1303
g8
S'auto_41'
p1304
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1305
(dp1306
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp1307
sbasg11
(itheano.gof.utils
scratchpad
p1308
(dp1309
bsg156
(lp1310
g1291
asg158
g3
(g1040
g5
NtRp1311
(dp1312
g1043
(g1033
tp1313
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1314
(dp1315
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1316
(dp1317
bsg156
(lp1318
g1280
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1319
(dp1320
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1321
(dp1322
bsg156
(lp1323
g1272
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p1324
(dp1325
bsg156
(lp1326
g971
asg158
g3
(ctheano.tensor.subtensor
IncSubtensor
p1327
g5
NtRp1328
(dp1329
g1043
(lp1330
c__builtin__
slice
p1331
(NNNtRp1332
ag1331
(NNNtRp1333
ag1331
(g1033
g1033
NtRp1334
ag1331
(g1033
g1033
NtRp1335
asS'destroyhandler_tolerate_aliased'
p1336
(lp1337
sg172
g173
sS'set_instead_of_inc'
p1338
I01
sg169
I00
sbsbsg139
g1192
sbag3
(ctheano.tensor.sharedvar
TensorSharedVariable
p1339
g5
NtRp1340
(dp1341
g8
S'auto_5'
p1342
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1343
(dp1344
g14
(lp1345
(lp1346
(S'/Users/gherka/anaconda/lib/python2.7/site-packages/lasagne/utils.py'
p1347
I309
S'create_param'
p1348
S'return theano.shared(arr, name=name)'
tp1349
aasbsS'container'
p1350
g3
(ctheano.gof.link
Container
p1351
g5
NtRp1352
(dp1353
g20
S'layer_1_unroll=0.W'
p1354
sS'storage'
p1355
(lp1356
g151
(g152
(I0
tS'b'
tRp1357
(I1
(I4
I3
I3
I3
tg244
I00
S'\x0f\x92\xd9=J\x93\xa3?)\x9eI\xd5\x08O\xd1?\xb5\xd4\xa1DP\xa0\xc4\xbf\xe2SS\x91U\xef\xd6\xbf\xb7d\xb3\xe0.\xd6\xb9\xbf\xf6\xbfI5ac\xda?\xc9\xa6\xa9p\xc0\xf2\xc7\xbf\x0b?3MZ\t\xe2\xbf\xf3d\x99_\xae\x08\xcb\xbfa\xaa\x02\xa35^\xd1?x\xadm\xe1\xa44\xd9?\xaa\xc4\xdf\xb6u\xe7\xdd?\x8f\x99\xd3\x8d%\xaa\xd1\xbfUq\x82.\xccp\xcb\xbfOT\x18\xd3a\xd9\xd9?\xb5\xef\x02\x1b;$\xdd?^\xfe\xb6"\xc5;\xe3\xbf\xe6\xec\n7\x17p\xd3\xbf\x98\xeb\xc9"\xc7\x07\xd4\xbfe\x9d\xd5Ax9\x86\xbf\x9c\xdcP\xc7\xedH\xd2?\x1c\x15\xfa\x8e\xa2O\xd4?A\xd2\xa6\xf8Y\\\xcd\xbf8\x1ez%\xe6\x0c\x8f?\x18t\xb9\x16"\xa8\xc0\xbf \n\x8cE\xe8b\xbe\xbf\xf1!\x0e:\x9b3\xde?\x84\r\xbc(\x1ax\xd9?\xc1\x15\x0c|\xddz\xd7\xbf\xf5\xa7\xfb\xf3\'\x80\xe0?\xf5\x0f\x88\xa9\x07\xb0\xd2\xbf&\xad1\xa0l\x1e\x8e?\x93\x08\xe0j\xf4J\xd2\xbf+\x9d\x847\x16P\xc8\xbfMN\xdd\x8d\xc2(\xde\xbf\x1a\xd1\xc8E7\xaa\xe1?o\xb7b\xb9\xec8\xd8\xbf2\xb0Ar\xab\xe6\xd8\xbf\x8f\x16\x03\x9e\x08\xe8\xd1?Q_\x16=\x15\xb9\xcd\xbf%\xbd\xbd\xf4\xd6\x93\xc1\xbf\x9b_`\x17\xa1o\xd1\xbf\xb8\xa2^R0x\xd9\xbf\x86*\xc3\x87/\xb1\xb8\xbf=\xde\xd2eNd\xaa?\x8bJ\x10\xdf\xdb\x9a\xdf?\x83f\x0c\xef|\xbf\xb8\xbf \x15\xc6\xf2\x03G\xb1?w\x8e\xc3\xc3As\xda\xbf\x1ff\x1cVy3\xcd\xbf\x8a\x01\xfa\xd2\x89\xfd\xa5\xbf\xcc\xa7{\xdf\x15\x8a\xc3?_IV\nl\xa8\xd3\xbf\xce\x80\xcf;\x18*\xa9?\x82\x1a\xd8\x98Z\xcb\xd6\xbf\xefU\xfa\xf9\x0c\xae\xd4?r\xf7s\xcb\x96\x88\xc9?\x1eT\x86Nx\xf3\xd9?\xa9\xbc,\x11j\x8f\xdd?X\xb0\x86\xd4\xc9\x15\xdc?\xff\x9a#\xfb\xe7\x11\xcd\xbf\\\xd5\xe1\x12\xa8\xb1\x94\xbf\xf7&t9\xf7\x19\xc2?\x1e\xef\x95$5\xea\xd9?\n$\rx\x8e\x80\xbf\xbf\r\xdc\xcd\xe4\xa3y\xa5?1\xbe\xa2[\xdcv\xc7?\xad\xcaFD\x03\xe6\xd3?\xa1(\x9f\x93\x85\xa5\xde?\xad}`\x0b\x12m\xcc\xbfQUat\x93I\xc6?Y+\x1e\xe4\x1e\xa7\xd2?#\xe1\xe7\x9ax&\xd2?\xed\x99\xd8\'\xb2\x8b\xd8?\x87\xf2\x85r\xf7:\xa0\xbf\xbbKFq\xdb(\xc2\xbfX\x9f\x82\x83]\x1c\xd0\xbf\xa9y\x19\xb9\xc5\x1b\xd5\xbf\xa5\x99\xe8jOL\xbe\xbf\xac\xfd\xfb\xe7\xba\xa1\xd6\xbf\x82C\xbc\xdb\xdc\xe7\xdf?\x91p\xd2\xcb2-\xc1?\x9d\xb6\xb8\xfef\xa7\xc0\xbfOq\xeca1\xad\x91\xbf\xfb"}`\x1c\x86\xd6?7\xac\xff>\xd6\xd8\xda\xbf\\\xe8a\x17fC\xb3\xbfDW\x8b\x0c\x99O\xd0\xbf\x80\xad\x0f\x8a=\xbf\xb1\xbf\x06\x1bR>GL\xb9\xbf\xb6\x15\x16;\t\xd5\xdb?8\x8b\xfc\x0e4}\xb2\xbfS\xf3\xfe\x05\xf1\x06\xd7?\x1b\xda\xf3\x17\xe1\x85\xc1?\x9a\xc5\x8f\xf7\xee\x85\xce\xbf\xf8\x91\xc7\xa5\xcf\x84\xdc?\xb13\xd4\xf7\xe3\x8e\xde\xbfm\xbf\xe4\xb2\x92\x0c\xb1\xbf\xd9;OT\xed\xad\xd8\xbf[\x90\xd8\xc3\x8b7\xa0?\xa2,4\xa9\xe1\x04\xe0\xbfZ@\xf4G\xa2-\xce\xbfK\xff\xe66\t\x94\xd0\xbf#\n@\xbfq\xadq?\xb0g\x1e\t\xe3\xaf\xda\xbfw\x9c#\xe0\x89q\xdc\xbf\xf5\x8f\x87v\x0bS\xc8?\xfd\xce\xe1\x9b\x9d\x83\xc2?'
tbasS'strict'
p1358
I00
sS'readonly'
p1359
I00
sg139
g3
(g140
g5
NtRp1360
(dp1361
g143
(I00
I00
I00
I00
tp1362
sg144
S'float64'
p1363
sg146
g244
sg149
I00
sg20
NsbsS'allow_downcast'
p1364
Nsbsg20
g1354
sg22
Nsg139
g1360
sbasg11
(itheano.gof.utils
scratchpad
p1365
(dp1366
bsg156
(lp1367
g960
asg158
g3
(ctheano.tensor.nnet.abstract_conv
AbstractConv2d
p1368
g5
NtRp1369
(dp1370
S'imshp'
p1371
(I2
I3
I7
I7
tp1372
sS'filter_flip'
p1373
I01
sS'kshp'
p1374
(I4
I3
I3
I3
tp1375
sS'subsample'
p1376
(I1
I1
tp1377
sg172
g173
sS'border_mode'
p1378
S'valid'
p1379
sbsbsg139
g3
(g140
g5
NtRp1380
(dp1381
g143
(I00
I00
I00
I00
tp1382
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1383
(dp1384
g8
S'auto_57'
p1385
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1386
(dp1387
g14
(lp1388
(lp1389
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp1390
aasbsg20
Nsg22
g3
(g23
g5
NtRp1391
(dp1392
g26
(lp1393
g3
(g1339
g5
NtRp1394
(dp1395
g8
S'auto_6'
p1396
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1397
(dp1398
g14
(lp1399
(lp1400
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp1401
aasbsg1350
g3
(g1351
g5
NtRp1402
(dp1403
g20
S'layer_1_unroll=0.b'
p1404
sg1355
(lp1405
g151
(g152
(I0
tS'b'
tRp1406
(I1
(I4
tg244
I00
S'\x96i\x95\xcaJ`\xa2\xbfAq\xcd\xd6CT\xa7?\xd6\x82\x07\xbb\x12\xa8i\xbf<$\xe2\x16x\x8b\x7f?'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp1407
(dp1408
g143
(I00
tp1409
sg144
S'float64'
p1410
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g1404
sg22
Nsg139
g1407
sbasg11
(itheano.gof.utils
scratchpad
p1411
(dp1412
bsg156
(lp1413
g1383
asg158
g3
(g159
g5
NtRp1414
(dp1415
g162
(lp1416
sg164
(lp1417
I0
asg166
(lp1418
I0
aI2
aI3
asg168
(I00
tp1419
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp1420
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1421
(dp1422
g143
(I01
I00
I01
I01
tp1423
sg144
g1410
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1424
(dp1425
bsg156
(lp1426
g949
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1427
(dp1428
g143
(I00
I00
I00
I00
tp1429
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1430
(dp1431
g8
S'auto_64'
p1432
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1433
(dp1434
g14
(lp1435
(lp1436
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp1437
aasbsg20
Nsg22
g3
(g23
g5
NtRp1438
(dp1439
g26
(lp1440
g949
asg11
(itheano.gof.utils
scratchpad
p1441
(dp1442
bsg156
(lp1443
g1430
asg158
g3
(g1121
g5
NtRp1444
(dp1445
g1124
g1125
sg1126
g3
(ctheano.scalar.basic
Abs
p1446
g5
NtRp1447
(dp1448
g1130
ctheano.scalar.basic
same_out
p1449
sg172
g173
sg20
Nsbsg20
S'Elemwise{abs_,no_inplace}'
p1450
sg172
g173
sg1134
(dp1451
sg1136
(S'abs'
I1
I1
tp1452
sg1138
(dp1453
sg1140
I00
sg1141
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p1454
sbsbsg139
g3
(g140
g5
NtRp1455
(dp1456
g143
(I00
I00
I00
I00
tp1457
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1458
(dp1459
bsg156
(lp1460
g938
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1461
(dp1462
g143
(I00
I00
I00
I00
tp1463
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1464
(dp1465
bsg156
(lp1466
g895
asg158
g3
(g1121
g5
NtRp1467
(dp1468
g1124
g1125
sg1126
g3
(ctheano.scalar.basic
Mul
p1469
g5
NtRp1470
(dp1471
g1130
g1131
sg172
g173
sg20
S'mul'
p1472
sbsg20
S'Elemwise{mul,no_inplace}'
p1473
sg172
g173
sg1134
(dp1474
sg1136
(S'multiply'
p1475
I2
I1
tp1476
sg1138
(dp1477
sg1140
I00
sg1141
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p1478
sbsbsg139
g3
(g140
g5
NtRp1479
(dp1480
g143
(I00
I00
I00
I00
tp1481
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1482
(dp1483
bsg156
(lp1484
g884
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp1485
(dp1486
g8
S'auto_76'
p1487
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1488
(dp1489
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1490
sbasg11
(itheano.gof.utils
scratchpad
p1491
(dp1492
bsg156
(lp1493
g873
asg158
g3
(g1040
g5
NtRp1494
(dp1495
g1043
(g1033
tp1496
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1497
(dp1498
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1499
(dp1500
g8
S'auto_79'
p1501
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1502
(dp1503
g14
(lp1504
(lp1505
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1506
aasbsg20
Nsg22
g3
(g23
g5
NtRp1507
(dp1508
g26
(lp1509
g884
ag3
(g1026
g5
NtRp1510
(dp1511
g8
S'auto_78'
p1512
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1513
(dp1514
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1515
sbasg11
(itheano.gof.utils
scratchpad
p1516
(dp1517
bsg156
(lp1518
g1499
asg158
g3
(g1040
g5
NtRp1519
(dp1520
g1043
(g1033
tp1521
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1522
(dp1523
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1524
(dp1525
g8
S'auto_88'
p1526
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1527
(dp1528
g14
(lp1529
(lp1530
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1531
aasbsg20
Nsg22
g3
(g23
g5
NtRp1532
(dp1533
g26
(lp1534
g3
(g4
g5
NtRp1535
(dp1536
g8
S'auto_81'
p1537
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1538
(dp1539
g14
(lp1540
(lp1541
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1542
aasbsg20
Nsg22
g3
(g23
g5
NtRp1543
(dp1544
g26
(lp1545
g884
ag3
(g1026
g5
NtRp1546
(dp1547
g8
S'auto_80'
p1548
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1549
(dp1550
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp1551
sbasg11
(itheano.gof.utils
scratchpad
p1552
(dp1553
bsg156
(lp1554
g1535
asg158
g3
(g1040
g5
NtRp1555
(dp1556
g1043
(g1033
tp1557
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1558
(dp1559
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p1560
(dp1561
bsg156
(lp1562
g1524
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1563
(dp1564
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1565
(dp1566
g8
S'auto_100'
p1567
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1568
(dp1569
g14
(lp1570
(lp1571
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1572
aasbsg20
Nsg22
g3
(g23
g5
NtRp1573
(dp1574
g26
(lp1575
g3
(g4
g5
NtRp1576
(dp1577
g8
S'auto_83'
p1578
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1579
(dp1580
g14
(lp1581
(lp1582
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1583
aasbsg20
Nsg22
g3
(g23
g5
NtRp1584
(dp1585
g26
(lp1586
g884
ag3
(g1026
g5
NtRp1587
(dp1588
g8
S'auto_82'
p1589
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1590
(dp1591
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp1592
sbasg11
(itheano.gof.utils
scratchpad
p1593
(dp1594
bsg156
(lp1595
g1576
asg158
g3
(g1040
g5
NtRp1596
(dp1597
g1043
(g1033
tp1598
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1599
(dp1600
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p1601
(dp1602
bsg156
(lp1603
g1565
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1604
(dp1605
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1606
(dp1607
bsg156
(lp1608
g862
asg158
g1190
sbsg139
g3
(g140
g5
NtRp1609
(dp1610
g143
(I00
I00
I00
I00
tp1611
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag895
ag3
(g1026
g5
NtRp1612
(dp1613
g8
S'auto_110'
p1614
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1615
(dp1616
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1617
sbag3
(g1201
g5
NtRp1618
(dp1619
g8
S'auto_112'
p1620
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1621
(dp1622
bsg20
Nsg22
g3
(g23
g5
NtRp1623
(dp1624
g26
(lp1625
g3
(g4
g5
NtRp1626
(dp1627
g8
S'auto_95'
p1628
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1629
(dp1630
g14
(lp1631
(lp1632
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1633
aasbsg20
Nsg22
g3
(g23
g5
NtRp1634
(dp1635
g26
(lp1636
g1221
ag3
(g4
g5
NtRp1637
(dp1638
g8
S'auto_90'
p1639
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1640
(dp1641
g14
(lp1642
(lp1643
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1644
aasbsg20
Nsg22
g3
(g23
g5
NtRp1645
(dp1646
g26
(lp1647
g884
ag3
(g1026
g5
NtRp1648
(dp1649
g8
S'auto_89'
p1650
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1651
(dp1652
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp1653
sbasg11
(itheano.gof.utils
scratchpad
p1654
(dp1655
bsg156
(lp1656
g1637
asg158
g3
(g1040
g5
NtRp1657
(dp1658
g1043
(g1033
tp1659
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1660
(dp1661
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1662
(dp1663
bsg156
(lp1664
g1626
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1665
(dp1666
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1667
(dp1668
bsg156
(lp1669
g1618
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp1670
(dp1671
g8
S'auto_111'
p1672
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1673
(dp1674
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1675
sbag3
(g1201
g5
NtRp1676
(dp1677
g8
S'auto_113'
p1678
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1679
(dp1680
bsg20
Nsg22
g3
(g23
g5
NtRp1681
(dp1682
g26
(lp1683
g3
(g4
g5
NtRp1684
(dp1685
g8
S'auto_107'
p1686
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1687
(dp1688
g14
(lp1689
(lp1690
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1691
aasbsg20
Nsg22
g3
(g23
g5
NtRp1692
(dp1693
g26
(lp1694
g1221
ag3
(g4
g5
NtRp1695
(dp1696
g8
S'auto_102'
p1697
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1698
(dp1699
g14
(lp1700
(lp1701
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1702
aasbsg20
Nsg22
g3
(g23
g5
NtRp1703
(dp1704
g26
(lp1705
g884
ag3
(g1026
g5
NtRp1706
(dp1707
g8
S'auto_101'
p1708
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1709
(dp1710
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp1711
sbasg11
(itheano.gof.utils
scratchpad
p1712
(dp1713
bsg156
(lp1714
g1695
asg158
g3
(g1040
g5
NtRp1715
(dp1716
g1043
(g1033
tp1717
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1718
(dp1719
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1720
(dp1721
bsg156
(lp1722
g1684
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1723
(dp1724
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1725
(dp1726
bsg156
(lp1727
g1676
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p1728
(dp1729
bsg156
(lp1730
g851
asg158
g3
(g1327
g5
NtRp1731
(dp1732
g1043
(lp1733
g1331
(NNNtRp1734
ag1331
(NNNtRp1735
ag1331
(g1033
g1033
NtRp1736
ag1331
(g1033
g1033
NtRp1737
asg1336
(lp1738
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g1609
sbag3
(g1339
g5
NtRp1739
(dp1740
g8
S'auto_7'
p1741
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1742
(dp1743
g14
(lp1744
(lp1745
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp1746
aasbsg1350
g3
(g1351
g5
NtRp1747
(dp1748
g20
S'layer_2_unroll=0.W'
p1749
sg1355
(lp1750
g151
(g152
(I0
tS'b'
tRp1751
(I1
(I7
I4
I3
I3
tg244
I00
S'\x9bslw\x0e\xbd\xd0?h\x9dw\xc8X\xb8\xb0?\xe2)\xf4&P\xdfa\xbf\xc0\xa5\x9b\x13\x114\xc3\xbf\xda\xcdR\xab\xe0\xf6\xd3?*\x9aQ\xa1\xb5g\xc7?\x02H#\xd9\xb0\xa9\x8a?\xae]\xad:\x8a<\xac\xbf\x1e\x91"\xa6\xc5\xd4\xc7\xbf\xc4\x816\xf9\x1d\xba\xc4?!\'b\x11\xd3\x93\xc5\xbfh\xd8]\xe7<%\xd8?\xc8J\xdd\x86\x05\xf1\xb3?\x1b\x80\x8a\x8fo\xd6\xd3?\x83\x94\x93hR\xf5\xc4\xbf"&\x0fB\xc7E\xcc\xbf@\xfdk\x93\xa4\xaa\xc8?\xefz\xf1\xcd\xb9c\xdb?\xe1J:{w\x0c\xcb\xbf8-L\x1bZ\x02\xc7\xbf\xf1N\xef+\x13\xe7\xaf\xbf\xa5\x06[]x\xe9\xcd\xbf\xae\xdc;\x9e8\xf0\xa5?{\xe2\\>\x00\xee\xc9\xbf\xb39\xd9j\xce!\xc9?\xaa\x12\xcf\xf3\xa2\x02\xa4?\xf8\xae\xf0\xe0#\xb7\x87\xbf\xee(\x16\xd8\x1f\x15\xc5\xbf\xbb\x8e\x95{\xcf<\xbe?\xed\xc6$\xed\xbc\xd2\xba\xbf\xb3+I8mN\xd3?\xf8\x11\x8a\xb8"(\xd7?\x11y\xe8\xf2\xeb\xcb\xce?\x90\x90\x82\xe6\x7f\xc5\xb8\xbf@\xe1G\xd4\xaa\xc1\xd8?\xa9\x06\xd3\xac\xb1\xe1\xd6?\x90\xa3\x18\x13\x91\xca\xc4?xe\xe5\xb7\x15T\xd0?\x10K\xdb\x15f\x86\xca\xbf\x10\x8d\x8d\x16\xb9/p?Hp\x08\x897|\xd0\xbf1ao\xe2Dl\xda?\x18g~\xda\xd6\x06\x8b?\x1d\xb5i\x0f\xaf\x8e\xc3?\xa8y\x91\xdeP0\xc7\xbf\xc0\x0f\xc8\x0e\xc7\x0c\xad\xbf9\xc9\xa0\xc4\x05\xf0\xb6?\xe2\x17c\x12\xd3\x03\x8f\xbf\xa4\xda4l\xe3\xf5\xd1\xbf\x1b\x9d\t"\x0fe\xc3?\xee*C\x82\x85<\xd8?>$J\x11\xa00\xa7\xbf\x0b7t\xec&\x8c\xc8?\x08\xe0\xa6\xa7\xf4\xf4\xcc\xbf*\x00H\xe0|\xd9\xc4?\xd9\xc6!+7I\x92?9J$\xe7\x8dZ\xc6?\xb3B`\xd2h\xd2\xc0\xbf\x9aU\x03G\x93\x8d\xca\xbfPenz\x08n\xac\xbf\x01l\xef\x80\xc9(\xc5\xbf{\x03\xa3\xc2\xb2\xe0\xd2\xbf\xf6\x87\x91=3h\xcb?\r)\x85\xc6U\x89\xd6?\x86@\xfa\x02\x99!\xd9?jb\xe5U%\x88\xc1?\x80F\xfd\xf8\x88o\xca?\x7f\x0b\xdc<\xed]\xc9?;C\xb8\x01y5\xd0?\xdee\n\xe2,\xad\xd7?}\x1b\xd8~\xad\xc0\xc6\xbf\xefr\x90\xc9a\x8c\xc0?\xdd\xf3\x0f\x9e\x03|\xc8?\xf6\x83\x16[\xfd6\xd3?\xea\xc5\x1b;\xcf\x95\xc1\xbf}\x1b:\x16M\xf5\xd9?mY\xcb\xeaG\xa3\xbb\xbfi\x87s}\xe0\x1b\xde?N\x08\xcb\x93\x17\xd8\xd8?+\x0b\x8b\xa3J\xf3\xda\xbf\xbe\x06 J\x11\x1d\xb4\xbf}8\xee6=\x0c\x9c?\x19T0gP\xf6\xc2\xbf\xe3O\x8eT\xcf\x8e\xcf?\x1f\xbbv\xc2\x96\xbf\xda?\xb1\\\xa2\x12\xd5\xb0\xd7\xbfh\xa7ej\xef\x1a\xd1?\xb0\x89\xe2\xcf\x0cB\xd0\xbf\x94\xed\x7f\x03\xa5\x1f\xc5?\x88[\xd4Z\xce\xe6\xb5\xbf\xa4\xbd\x9aT\x98\xa8\xc3\xbfK5{\xb3\x0f_\xab?\x8d4\xd2\xc1~@\xd8?V\x8a=\xf9\xd5\x87\xd6?/\xda\x01H\xafR\xc7\xbf6\xad\x86S\r\xab\xb7?\x8a\x0bg\xe4\x1by\xc9\xbf:\xe4\x17\xca\x92\xe3\xd2?\xda\xd21\x8eK\x8f\xcf?D\xee\x1e\xeck`\xca\xbf\xa1":\xb0_o\xa6?\x1d5\xc2g\xb8{\xd0\xbf\xfe\xe4\xea\x83,S\xbc?\xe3\xad\x1c:g\xba\xd5?\xa4\xbc\xb3\x9c;\xc8\xac\xbfy38ze\x17\xb8\xbfp\xab\x93J\xba\x86\xc9?\xf2\x97\xdc\xa9\x10N\xa9\xbf\xdb;\x18\xbd\xb7~\xd1\xbfG\xed\xd8\xf73\xbe\\\xbf\x06-\xec\xd0FJ\xd1\xbf\xacQ\xdfG\xe7\x97\xbf?\x8f\xa53a\xc0\x1a\xd6?\xbdU\x0b\x98\x17V\xc1\xbf\xa4\xcd\xa5\xdd!T\xb5?\n{\xe8L\xb9\x8e\xd0\xbf\xeau\x95\xdd\xb4i\xc5\xbf\x957?\xaf\x01|\xbd\xbf\xf68\xaf\x1e\xa8\xc5\xd7?\x85\xf7\x05(\x9dH\xcd?\x0f\xd6\xc8\x93\xe6m\xd2\xbf\xc1L\xdeM\x17\xfb\xcb?\x8a\x9c\x0e\x12\xff5\xd3?\'\xdb\xdb\xa6\x19\x05\xda?s\xf0L\xac^\xab\x81\xbf\xe8\x10\xf8N\xad\xce\xd4\xbf\x8b\xae\xc7\x06We\xd5\xbf\x8dzi+K\x97\xce\xbf\x82\xeb=%\x07\r\xca\xbfLl\x00\x0e\xc8\xf3\xcf?\x0c\x9e\xc0\x06\x89\xd1\xc5?\x8a\xe7\xee\x95\xfc(\xd9?Py\x01\xebB\xd9\xbd?\xc9~\xbb\xc7x4\xb4?:\x1fu%?\xb1\xd5\xbf\xe3^\x1di\x9a\x98\xd9\xbf\xe6^\x9e\x8fS\x80\xc6\xbf\xf6\xfc\xe8\x95\x9f\xd6\xc3?I-\x10\xf7\xfd\x97\xcb?1O95"\xb8\xd8?q&Cd\xf8\x16\xb4\xbf\x8e\xc6\x9b>\xe7\x06\xdb\xbf\x81\xf4\xb2\x97\xa6\x16\xb4\xbf\x0b\x93\xe89%_\x9e?.$\xf8QH}\xd3\xbfq\xf5\x0c4\x1a\xce\xdb?\xed\xc6D\xa6\x86\xea\xae\xbf\xb8\xc6\x12il\xd2\xae?\xe9\x1b\xb5\xd2\r\xbc\xd3?\x8e\x82\x83j\xe6\xb8\xcd?\xe8\xc9\xf7\xae\xde\xb1\xbb\xbf\xber\xc4\'_U\xca?\x97\xf1\x93&T\xb5\xb2\xbf\x02/\x9bd_\xd1\xbc\xbfCO\x8e\xd4\t\xd3\xd0?\xed\xcew\x19)\x96\xa6\xbf,=>\\\xcdi\xc8\xbf\xf9\x8c\x02\x99D\x16\xd1?#\xf0:\x18k\xe9\xa5\xbf.i\xf8\xdc\xfb"\xd7?M(\xcb\x01\xd7\x8c\xcb\xbf\x8e\xefs\x9c\xf9\x83\xd1\xbfX\xea\xdd\nm\xbb\x9f?\x15\x19[\x7f\xfb\xce\xcf\xbf\xc9\x05]\\\nb\xd3?\x9eA\xeb\x1f\xfcZ\xd6?%\xbf\x9a-\xa2\x03\xd3\xbf\xde\xce\xe4\x90\xe0l\xbf\xbf\x84\x1ds\t\x19N\xbf\xbf\xb1yU\xa4Jt\xd2?\x90\xe5\xb7\xf9\xe7g\xbb?\t<:\x80#\xe0\xd3?\x9d\xe8\xeb\x9bG\x80\xd5? t\xb5\xf5y\xd3\xa2\xbf\xf2u\xbe\xbe\xd3J\xcc\xbf\x15\x88\xae\x9aM\x1a\xc7\xbf\x8f#Zq>\x15\xc5?=\xa3E\xc4\xe0\xba\xdd\xbfR\x06\xd2\xd7\x9b\x83\xc1\xbf#\x16T\x94\xad\x0e\xd7\xbf\x82\x97X\x9c\x97N\xbe\xbf\x13\xde\x07(\xb5\xd3\xc2?\x82\xd3\xf0jp6\xd6\xbf\x08\xc1\xe3\x1b\xdb1\xd4\xbfb\x98\xcf\xfdM\x0f\xda?\xaeu\xcc @\xd1\xa2?\xf7\x96\x7f\xb3\x1e\xcd\xc4?\x8c\xb8\xe0\xf75\x06\xbd\xbf\xc47\x9b\xef\x08@\xd0?\xe9\xa7\r\x8e\xd6\x8c\xc1?pw\xc9t\xec\x04\xc9?\xe1\x9d\xbd\xf9\xd3\x8f\xbb?\xbe\x19\xd1R\x96\xab\xa6?\x92\xc7"~D\x86\xb9?\xc2@?\xb8\xa3\\\xbd\xbf0\xcb#\x88tG\xd8?+c.\xffB\x15\xcd\xbf\x81D\xe9P\xd7b\xcd?B\xbeS\x18LR\xbe\xbf\xfaZ\xdd*\x1d|\xa5?\x9bx{\x10\xc3\xbd\xcf\xbfD"\x8d|\xdb\x02\xa5\xbf\xfc\xb6\xdf\xe9\xf5\x80\xda?\xa9\x11t\x0c\xaa\x8d\xc7\xbf7+LI\xfbC\xbf\xbf\x94\xb2\x92\x94\x83\xcc\xce?\xec\\\r\xd3*l\xca\xbf\xc3\xd3\xa57\x16?\xbf?MM\xc6,\xaa\xc7\xb0\xbf\xdbH\x91U\xc1A\xdc?\xb2M"\xd0f\x91\xae\xbf\x14\x88\xb9>\xe7\n\xd3\xbf\xe1\xe1\x12\xb9\xeeJ\xa2?\xdc\x18\x83\xb5\x08I\xcc?W>\x8cz\xeb\x89\xd1\xbf\xfe\xf5\xfe\x9c9=\xc6\xbf\x0b\x93\xd1H\xaba\xd0\xbf\x18\xab\x16:\xb0B\xd2?\x89\xfa,b1\t\xd0\xbf\x1e\x17\x80T\x0b\x9d\xc8?D_\xd2\xc5\xbaY\xc9\xbfq:\x87\xd5Q`\xd9?6`\x84\xbc\xa4$\xb9?v\xc4\xf9\xbaSN\xd2\xbf\xec\x95$\xacvn\xcc\xbf\x04\xd4BBP(\xb9?8\xa7\xb0\xdf\x10\x88\xd9?\xba\xa7|*\xa3\x8c\xd3?\x81S\x93\r{\x0b\xd5\xbf\x11\xa0\x02\xd8\x1d\xbf\xcc?\xf6P\x18\xe0\xf8\xbf\xd4?\xdbgM(\xa7\x92\xa0?o\xe7\xb8\xd2\xa7\x88\xd0\xbf\xe9\xb5N\xb5\x1a\x9f\xb0?t{a\x9eg7\xba?\xf6@RN\x16\x1e\xd4?\xa6\xcb\xf08\xd7\xf4\xa3?\x1b#\xc7\xcd`l\xc8?\xfa\x19\xb7~5\xf6\xc2\xbfl\x8a#\xc8\xda\x16\xd2?\x91\xc1\xf1\x19+u\xb7\xbf\xb5G\x01\xae)\xaf\xbe?\x151\x0b\xa3@e\xce\xbf\xdcE\xa5\xe2\xdcL\xd0?\xa2\xe3I=\xa2\xd4\xd1?\x80=\x9b\x1bTh\xb3\xbf)\xe7\xa9\x10\xb2E\xd9?\xc9\x1a\xb3\xac43\xa0?l\x14\xa4"Q\xec\xc5\xbfR\xab\'}\x07.\xcc\xbf\r\x96XP\xeb\xd9\xc8\xbf\xe1\x99L+\x82m\xb5?'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp1752
(dp1753
g143
(I00
I00
I00
I00
tp1754
sg144
S'float64'
p1755
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g1749
sg22
Nsg139
g1752
sbasg11
(itheano.gof.utils
scratchpad
p1756
(dp1757
bsg156
(lp1758
g840
asg158
g3
(g1368
g5
NtRp1759
(dp1760
g1371
(I2
I4
I7
I7
tp1761
sg1373
I01
sg1374
(I7
I4
I3
I3
tp1762
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp1763
(dp1764
g143
(I00
I00
I00
I00
tp1765
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1766
(dp1767
g8
S'auto_117'
p1768
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1769
(dp1770
g14
(lp1771
(lp1772
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp1773
aasbsg20
Nsg22
g3
(g23
g5
NtRp1774
(dp1775
g26
(lp1776
g3
(g1339
g5
NtRp1777
(dp1778
g8
S'auto_8'
p1779
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1780
(dp1781
g14
(lp1782
(lp1783
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp1784
aasbsg1350
g3
(g1351
g5
NtRp1785
(dp1786
g20
S'layer_2_unroll=0.b'
p1787
sg1355
(lp1788
g151
(g152
(I0
tS'b'
tRp1789
(I1
(I7
tg244
I00
S'^\xb8\xdbB\x1d\x94\xab\xbfZ\xdb.\x0c\x9aB\xab\xbfk|\xb8`\xd7\x07c\xbf\x81\xeb\x8f\x9cw\xf1\xb1?\x1cTfA$\xcd\x9b?k\xad\xb9\x8d6\x9c\x97?}\xd4\x0b\x0e\xd4\xf3\x9d\xbf'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp1790
(dp1791
g143
(I00
tp1792
sg144
S'float64'
p1793
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g1787
sg22
Nsg139
g1790
sbasg11
(itheano.gof.utils
scratchpad
p1794
(dp1795
bsg156
(lp1796
g1766
asg158
g3
(g159
g5
NtRp1797
(dp1798
g162
(lp1799
sg164
(lp1800
I0
asg166
(lp1801
I0
aI2
aI3
asg168
(I00
tp1802
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp1803
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1804
(dp1805
g143
(I01
I00
I01
I01
tp1806
sg144
g1793
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1807
(dp1808
bsg156
(lp1809
g829
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1810
(dp1811
g143
(I00
I00
I00
I00
tp1812
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1813
(dp1814
g8
S'auto_124'
p1815
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1816
(dp1817
g14
(lp1818
(lp1819
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp1820
aasbsg20
Nsg22
g3
(g23
g5
NtRp1821
(dp1822
g26
(lp1823
g829
asg11
(itheano.gof.utils
scratchpad
p1824
(dp1825
bsg156
(lp1826
g1813
asg158
g1444
sbsg139
g3
(g140
g5
NtRp1827
(dp1828
g143
(I00
I00
I00
I00
tp1829
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1830
(dp1831
bsg156
(lp1832
g818
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1833
(dp1834
g143
(I00
I00
I00
I00
tp1835
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1836
(dp1837
bsg156
(lp1838
g775
asg158
g1467
sbsg139
g3
(g140
g5
NtRp1839
(dp1840
g143
(I00
I00
I00
I00
tp1841
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1842
(dp1843
bsg156
(lp1844
g764
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp1845
(dp1846
g8
S'auto_136'
p1847
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1848
(dp1849
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1850
sbasg11
(itheano.gof.utils
scratchpad
p1851
(dp1852
bsg156
(lp1853
g753
asg158
g3
(g1040
g5
NtRp1854
(dp1855
g1043
(g1033
tp1856
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1857
(dp1858
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1859
(dp1860
g8
S'auto_139'
p1861
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1862
(dp1863
g14
(lp1864
(lp1865
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1866
aasbsg20
Nsg22
g3
(g23
g5
NtRp1867
(dp1868
g26
(lp1869
g764
ag3
(g1026
g5
NtRp1870
(dp1871
g8
S'auto_138'
p1872
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1873
(dp1874
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1875
sbasg11
(itheano.gof.utils
scratchpad
p1876
(dp1877
bsg156
(lp1878
g1859
asg158
g3
(g1040
g5
NtRp1879
(dp1880
g1043
(g1033
tp1881
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1882
(dp1883
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1884
(dp1885
g8
S'auto_148'
p1886
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1887
(dp1888
g14
(lp1889
(lp1890
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1891
aasbsg20
Nsg22
g3
(g23
g5
NtRp1892
(dp1893
g26
(lp1894
g3
(g4
g5
NtRp1895
(dp1896
g8
S'auto_141'
p1897
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1898
(dp1899
g14
(lp1900
(lp1901
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1902
aasbsg20
Nsg22
g3
(g23
g5
NtRp1903
(dp1904
g26
(lp1905
g764
ag3
(g1026
g5
NtRp1906
(dp1907
g8
S'auto_140'
p1908
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1909
(dp1910
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp1911
sbasg11
(itheano.gof.utils
scratchpad
p1912
(dp1913
bsg156
(lp1914
g1895
asg158
g3
(g1040
g5
NtRp1915
(dp1916
g1043
(g1033
tp1917
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1918
(dp1919
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p1920
(dp1921
bsg156
(lp1922
g1884
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1923
(dp1924
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp1925
(dp1926
g8
S'auto_160'
p1927
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1928
(dp1929
g14
(lp1930
(lp1931
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp1932
aasbsg20
Nsg22
g3
(g23
g5
NtRp1933
(dp1934
g26
(lp1935
g3
(g4
g5
NtRp1936
(dp1937
g8
S'auto_143'
p1938
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1939
(dp1940
g14
(lp1941
(lp1942
(g218
I33
g219
S'output_shape = list(input_shape)'
tp1943
aasbsg20
Nsg22
g3
(g23
g5
NtRp1944
(dp1945
g26
(lp1946
g764
ag3
(g1026
g5
NtRp1947
(dp1948
g8
S'auto_142'
p1949
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1950
(dp1951
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp1952
sbasg11
(itheano.gof.utils
scratchpad
p1953
(dp1954
bsg156
(lp1955
g1936
asg158
g3
(g1040
g5
NtRp1956
(dp1957
g1043
(g1033
tp1958
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp1959
(dp1960
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p1961
(dp1962
bsg156
(lp1963
g1925
asg158
g1122
sbsg139
g3
(g140
g5
NtRp1964
(dp1965
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p1966
(dp1967
bsg156
(lp1968
g742
asg158
g1190
sbsg139
g3
(g140
g5
NtRp1969
(dp1970
g143
(I00
I00
I00
I00
tp1971
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag775
ag3
(g1026
g5
NtRp1972
(dp1973
g8
S'auto_170'
p1974
sg10
Nsg11
(itheano.gof.utils
scratchpad
p1975
(dp1976
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp1977
sbag3
(g1201
g5
NtRp1978
(dp1979
g8
S'auto_172'
p1980
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1981
(dp1982
bsg20
Nsg22
g3
(g23
g5
NtRp1983
(dp1984
g26
(lp1985
g3
(g4
g5
NtRp1986
(dp1987
g8
S'auto_155'
p1988
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p1989
(dp1990
g14
(lp1991
(lp1992
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp1993
aasbsg20
Nsg22
g3
(g23
g5
NtRp1994
(dp1995
g26
(lp1996
g1221
ag3
(g4
g5
NtRp1997
(dp1998
g8
S'auto_150'
p1999
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2000
(dp2001
g14
(lp2002
(lp2003
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2004
aasbsg20
Nsg22
g3
(g23
g5
NtRp2005
(dp2006
g26
(lp2007
g764
ag3
(g1026
g5
NtRp2008
(dp2009
g8
S'auto_149'
p2010
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2011
(dp2012
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2013
sbasg11
(itheano.gof.utils
scratchpad
p2014
(dp2015
bsg156
(lp2016
g1997
asg158
g3
(g1040
g5
NtRp2017
(dp2018
g1043
(g1033
tp2019
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2020
(dp2021
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2022
(dp2023
bsg156
(lp2024
g1986
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2025
(dp2026
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2027
(dp2028
bsg156
(lp2029
g1978
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp2030
(dp2031
g8
S'auto_171'
p2032
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2033
(dp2034
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2035
sbag3
(g1201
g5
NtRp2036
(dp2037
g8
S'auto_173'
p2038
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2039
(dp2040
bsg20
Nsg22
g3
(g23
g5
NtRp2041
(dp2042
g26
(lp2043
g3
(g4
g5
NtRp2044
(dp2045
g8
S'auto_167'
p2046
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2047
(dp2048
g14
(lp2049
(lp2050
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2051
aasbsg20
Nsg22
g3
(g23
g5
NtRp2052
(dp2053
g26
(lp2054
g1221
ag3
(g4
g5
NtRp2055
(dp2056
g8
S'auto_162'
p2057
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2058
(dp2059
g14
(lp2060
(lp2061
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2062
aasbsg20
Nsg22
g3
(g23
g5
NtRp2063
(dp2064
g26
(lp2065
g764
ag3
(g1026
g5
NtRp2066
(dp2067
g8
S'auto_161'
p2068
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2069
(dp2070
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp2071
sbasg11
(itheano.gof.utils
scratchpad
p2072
(dp2073
bsg156
(lp2074
g2055
asg158
g3
(g1040
g5
NtRp2075
(dp2076
g1043
(g1033
tp2077
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2078
(dp2079
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2080
(dp2081
bsg156
(lp2082
g2044
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2083
(dp2084
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2085
(dp2086
bsg156
(lp2087
g2036
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p2088
(dp2089
bsg156
(lp2090
g731
asg158
g3
(g1327
g5
NtRp2091
(dp2092
g1043
(lp2093
g1331
(NNNtRp2094
ag1331
(NNNtRp2095
ag1331
(g1033
g1033
NtRp2096
ag1331
(g1033
g1033
NtRp2097
asg1336
(lp2098
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g1969
sbag3
(g1339
g5
NtRp2099
(dp2100
g8
S'auto_9'
p2101
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2102
(dp2103
g14
(lp2104
(lp2105
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp2106
aasbsg1350
g3
(g1351
g5
NtRp2107
(dp2108
g20
S'layer_3_unroll=0.W'
p2109
sg1355
(lp2110
g151
(g152
(I0
tS'b'
tRp2111
(I1
(I6
I7
I3
I3
tg244
I00
S'g=E]\n\x96\xc3?$\x9b\x8f\xaa\x15\xdb\x99\xbf\xaa\x89\xb4\xff\x9a\xf5`?i\x08t\x88\xc5{\xcf\xbf)0\xd6\xd4@\x95\xd7?!\xb1/\xe2\x1fV;?W\xc6-3\xc7r\xd9\xbfm\x93\xa7\x13;\xa5\xcf?\x0cY\x14\t\xcb\x03\xc5\xbf0\xba\xad|\x18\xd8\xaf?\xafe\x15\x05\x01X\xd5\xbf\xc2kv\x06x\x9dd?g\xdaP\x16\xce\xb3\xd1?\x9d"\x8a\xd6\x01\t\xa2?\xd2\xe5\xdd\x9c\x11\x86\x9d?\xb87}\x99\xf1;\xa3\xbf\\\xbf\xd7\x0f\x9e\x95\xc1\xbf9\xf0\xd9(\x0c\x83\xc3?j\xae\xae:\xcf\xb1\xc7\xbf\xb0\x92~\x88\xc6\x02\xd1?\x10\xdc\xfe\xachx\x9f?*\xe2\x01\xf42\xd7\xd4?\xea;3~\xc0t\xd2?`\xd7m\'\xb8\xf5\xba\xbf\xd16i\xeah\xc9\xbd\xbf\xda[\x7fUh\xd4\xc3?O\xd0V\x0b\xc1h\xc2\xbft a\x02Q\xd5\xd4?\xa8\xac!G\x01\x91\xd3?GG\x92\xf8gp\xb2\xbfm_\x80\xde\xceL\xca\xbf\xd6\xbe\x0b\x91)\x1b\xd1\xbf\x95FV\xfb:\xf4\xc4\xbf\x04\xde\x02\xafN0\xd2\xbf\xb9[B\xa9\x8f\xa9\xd6\xbf\xb7\xc3\xd8\xe8\x05\xe6\xc0?\xd5\xc5\xee\xcb\xef\xb9\xd3\xbf\x9dO+\xd1\xf1C\xaf\xbf\x9dE\xff\x9c*U\xbb\xbf\xf0+\x86,\xdb>\xb3\xbf\xbb\xbf\xb0\xff\xd4!\xcd\xbf\x86\x8e7\x00\x1f\x9d\xcf?q\x14o\x19\x98\x13\xd6?\x03\xb1GI\x9a\x19\xcc?\xa5[+\xda\xf7\x19\xd9?\xb7\x0c\x1b~\x12\x07\xb2\xbf\x07_\xb5\x88\xda\xd4\xd2\xbf\xb32\xaa\xdb\x9fu\xcd?\xa5\xd5\x8aj\xe8b\xb3\xbfg~\xef\xdf\xdf]\xcc?\x8d\xf3eU\xf5C\xbd\xbf \x1d\x90s\x00\x85\x93\xbf\xd1\\Q4\xb5\x1c\xb0?LDk\x05\x82\xec\xb2\xbf\xd3\x83\xe9Md\x0c\xc7?\xd2\xc8\x0b\x9e\xdb\xbb\xbb\xbf\xfd\xb1\xca\xeb^\xee\xd2?\xa3\xe6[\xc1\xb3^\xd0\xbf\xf4\x1b\x923We\xcc?\xcd\xc3C9\xd4\xc0\xc6\xbf\xe4!\x19\xe17\x0f\xc3?\xb5a\x98\xb9\xe0\x1d\xc0?@\xb1l`d\xf9\xc0\xbfV\x85\xa2\x9fW;\xb8\xbf\xb0\xbf\xae\xd9:\xc4\xd4?\x18J\xa7\xcc\x1f\xc6\xd0?\x00\x93\x8b\xab\xe7\x0c\xc7\xbf\x99\x15\xe4\xa0c`\xc2\xbf:\xc5\'G\x97\x0b\xd0?/cp^^\xbe\x98\xbf\xb4\xd2\xdf{6u\xc0?\xc3\xa4\xac+\xb5\x19\xb6\xbf\xb8\x94\xce\xcb*\xa7\xc1?6\xf6\xf5q\x16\xa1\xd4\xbf\x8d\xbf\x80x\xe0\x15\xc4?\x04&\xed\xf7\x84\x01\xca\xbfYW\x9a\xaak9\x8c\xbf\x1c\xac\xf9\xe1\x01\xb5\xc8\xbf\x1c\x0f\xc2\x84\xee\x9c\xce?\x8a\xc9\xdf\xed\xe8\xee\xb0\xbf\xe0m\xc2V\xe0C\xd1?@\xa5\x88\xce\x81\xc7\xb0\xbfF\xc2}\x02\xe4\xdd\xa9?\x15l2\xe9fB\xcf?]\x1f\x82A\tS\xd3\xbf6\xe5\x89\xd1\x9eA\xa4\xbf\x8e\xb7\xa0\xf9\x1b\xaf\xd7?\x8f8W\x04g\xe4\xc2?\xbeXm\xc8\xedH\xd0\xbf/\xf3\xe2y\xbc\xad\xd5?\xdf3\x17\xe7!\x99\xb9?\xa55\x12"eq\xc7?L\xbbr7@7}\xbfD\x89\xf3\x0c\x16\x04\xdb\xbf#\xe52\x88\xd4\xbe\xb3\xbf\xb4r\xfd\x0c\x00\xeb\xcd\xbf\xa1\x90\xe2]\xf6\xbc\xc1\xbf\xb7\xde\xed\x16\xfdd\xd7?Bf\xd0\xb6\xf4\x10\xdd?\x05Q\xd3\xbeE\x14\xae\xbfY\xba\xdf\x96wm\xcb\xbf\xa1\xb9\xeewGc\xc4??Yg\xb8e.\xd4\xbf<\x83\xd9\x06<\xfb\xba\xbf\xda!\x89w\x80\x9e\xd3\xbf\x89\xf8\x136J\x9b\xcb?\xc2\xd6^\xe5D\x9e\xc4?\x97!9\xbeEh\xd5\xbf\xfc\x01\xff\x15\x7f \x8e\xbfa\x075\xf5\xf6\xe1\xd7?\x9c;\xc9\xd7\x12J\xd6?M\x8b\xd3~\xba^\xb3\xbf\x8c-\x03#\x8a\x80\xcd?Pq\xfb\x9d)`\xbe\xbf\x8d\xb3f\xb1W\x0c\xc4?!|:\xfc\xd6-\xcb\xbf@\xf5\x15\xb2\xd7\x08\xc3?-\xe3\xe72e\x10\xcc?o\xef\x7f\xb14A\xcc\xbfj\xde\xb0\x00\xc2\xc0\xcd\xbf\x9c<\xe8\x0c>\xe8\xd1\xbf\xcb(\xf2\xf2!\x91\xc6\xbf\xb8\x1d\xaf\xdal\x94\xcf\xbf\x94Ps\xadc\x84\xb8?\xd0H=\xe8 \xf4\xc8?\x96\x80\xec\xd7\xc3\x02\xad?&/\xe9Bs\r\xa1?\xcc\xcd\x81\x93\x86o\xcf?"\xe4\xb3\xdf\xed\xd3\xcc?d\x95J>T+\xd7?\xa1}\xcc\x8b>r\xd0?\xc1\x0f+\xc4\xbc\xe1\xd7?\xa3\'\x8e\xe7e+\xcf\xbf=IU?\x8d\xbc\xc8?\xf5\xec\xbf\xdb\xc1\xaa\xd0?\xcbW\xe0\xcdW\xde\xd4?\xa60\x101\x1do~?\x05\t\xcc\xff`g\xd2?\x83\x7fu\x96A\xb4\xcb?\xf3\x08h\xaer\r\xd9?\x08@K\xa7+\x12\xb3?TS]M\xca\xd5\xd0? \xa9[\x07\xa9\'\xd2\xbf\x8e\xb6\xbe\xa6\xf3\xb8\xd1?\xf2\xff\xe1\xceb\x18\xd0?\x1eK\xfdU\xe4\t\xcd?\x16\xeap+\xfb^\xaa\xbf\xa5\x146{\x90\xfc\xce??\x0e\xb7\x98\xf2\xae\xd6?\xa0\x18@\xe3\x91\xe1\xd2\xbfn.\n ]9\xb7\xbfq\xb4\xf8$&\xa8\xba?nb\xae\xe18\xa3\xca\xbf\x1a\xc7`\xc2\x0b\x16\xd6?;B\xe4\xf1m\xf4\xb9\xbf\xa4\xa5\x05(8"\xc3\xbfa\xd0\x81\x9f\x87\xc8\xac\xbf\x16\x98\xc7\x8f7u\xaa\xbfH_\x83N\x88\x1f\xcb?\xb3 \x03\xfa\xab\x14\xcf\xbfIh\xee\r\xb1s\xc5?NB\xf7\xd5\xcf\x17\xce\xbf\x9e\xf5t\xb8w\xc8\xd3?d\xb7\x96\x90\xc8\x03\xc0?\x14\x8ah9\x9bk\xd9?\n\x80\x8fO\xa1\xcd\xb3\xbf/=\xfe\x0c\n]\xb1\xbfD\xea\xe5\x85\x91#\xa1\xbfs\xefqg\xee\x8e\xd3\xbf!\x93-}\xf8=\xd5\xbf\xd8\x87\x06\x97z\xd5\xb4?|}"U\xd4\x86\xd5?%\'\x02U\xdc\x0f\xa8?1\xe4\xd38\xf7\xfe\xd2?\x9b\xf2;_\xe9h\xb4\xbf\xefN\x9dO"V\xbf?:@H\xd4\x9a|\xd6?\xf7\x8b2&\xf8\xb9\x88?A\xdbz\xd2zu\xd6\xbf\x1d\xfd\xe0e\x95\x9b\xb7\xbfm\xd4\xb9\x9d\xa0\x9e\xd0\xbfr\x08$\'3\xa8\xca?\x0f\xb9G4\xbe\xa9\xd2?\xcf\xcbE\x95t\xb5\xbb?\xd1\xb3\xefQ\xf52\xc8?\xa5?\x11!\x92\xa5\xc6?Ui\x92\xc7m\xf3\x9c\xbf\x0bGj\x00[\x0b\xb1\xbf\r\xeb}b[\xe0\xc6?e\xaa\xc1\xb6^\x08\xc4\xbf_\xffO(k\xcd\x9a?\xc5\xb0\xb3\x176q\xbc\xbf\xff\x0f\x94<\xf8?\xcf\xbf\x1a\x8c?nR\xac\xbc\xbf^\x8bm\xd0s.\xc2?\x12\xf2\xfbO\x0b\\\xce\xbf\xd6O\xf8X\x84t\xbe\xbf\x0e\xd7/Q\xa3=\xa1?R\x97\xe1\x96<\xa5\xc6\xbfk\x80\x8b4\xac\xe0\xc0\xbf\x8a\xdc\'\xea\'1\xca?2\xbf\x8c\x0f}H\xd1?\xd41]\x99\\\x18\xbe\xbfU\xbaw\x9b\xe7\x1c\xd3?\xd6\xc3\xb5\x87^-\xd0?\xe0\xe1\x08\x91\xc0f\xaa?OG\x00\x83\xaas\xb4\xbf\x03\xd2\xf0\x81V:\xcd\xbf\x93\x80\xfb\x16\x82\xb1\xb2\xbfv\xeaY m\xcb\xc8\xbf#\xe2\xb9N\xfdn\xa8\xbf\xd7\xcay\xaa\x9a\x17\xb6\xbf\x8c\x0c\xc5,\xfa\x8e\xc3\xbf\xbd\t\x92\x9b\x12\x97\xd1?\xb0&\xc5\x83N\xc1\xda\xbf%\xb1%\x8d\x00\x06\xc2?\xb0\x0c\xbbrg\x14\xd1\xbfZ\xbb\xd444\xba\xa8\xbfCm\xaeq\xca\x17\xd2?\x86\xfa\xc0U|e\xc4?\xba\xc0\xbb\xdcV\xe9\xc6?\xa9\xfd&\xa7\x8d\xd7\xc1?\xb2\xe1\xe1w\xf1*\xcc?\x0e\x9d\xcc\xb3\x8b\xdd\xd1\xbf\x02\x1d\xfc\xa0\x18\xcd\xb5\xbfT{\xa61\x07$\xc2\xbf\x91.\xe5\xb4\xc3\x89\xb5\xbf\x7fD}\x1c\xb8\x80\xc8\xbf9\x924\xfe\xf8L\xd5?\x08z\xe2p\x08\xa9\xd2?\t\xb2H\x9e\x80\x89f\xbf+\xdew\xc9F\xb3\xca?\x96\x8b\xe9G\xe6\x9as?,\xe3\x1b\xe9\xb5S\xc5\xbf>L\xf6E\xef\x19\x99\xbfiQBR\xdeM\xb8?YWc\xd8\\\xca\xc0?lc\xda9A\xad\xc0?T\x04bha\x8a\xd9?\xbe\xc2\xe1\xaf}\xd6\xcd\xbf\xe6De\xcd\x0c\x10\xc1?\xf9Y\xb5\xe6\x82\xba\xd2?`\xbbn\x81\x87\x96\xd4\xbf\x87\'YF\x9f:\xbe?\xa9\xb1\xd3\xadU\xf4\xd0\xbf\x82\xed\xe3#\\+\xd1?.\x00P\xee*]\xd8?a\xf1r=A\xf9\xd2\xbf\xfcv\xe7\xf4\x94Q\xcc?\xc4\xbb\xb5\xfa{\xa6\xb5\xbfr\xde\xad\xde\xf1\xb0\x9a\xbf3\xfa\xe4\x02\xb4\xa5\xd0\xbfJO\xe5\xactm\xc7?\xaf2g\xe9\x18=\xd5\xbf\xb5\x03\x114\xe9\xf8\xb5?\xd1\xf5\xfc7\x14\xfd\xd4?\xd4_{\xb1\xf87\xc6?q\x0c/\xa6\xe5\x03\xd0\xbf\xe8\xd2\xee\n2\xc8\xb5\xbfk\xb3\xfd\xb5\xd2d\xc9\xbf<\xbd_\xc8o\xe9\xc0?N\xec\xa8\x10\xfcA\xd5?\xa2\xaeI\xdc\x1b\xa7`\xbf\xe0\xefdhm\xbc\xb9?^\xeb\xab\xd2\xc8}\xcf\xbfb\xc0Zv\x84\xae\xd0\xbfo\x98\x93\xe0\xddZ\xa8\xbf\xce\xab\t\xbe\x8bl\xa4?<\x8a\x9fU\x08\xbe\xc7\xbf\xb3J\xcc\x9c\x1b\x81\xb7\xbfCT\xcb6Of\xb5?Vp\xdb\xab\xddw\xac?\xac/\n\xc1\xdb\x9b\xc9?\xfa\xd5\xa3"\x92\xef\x90?\x07y+\x0b\xab\x00\xb5?x1\x05:\xc0D\xb2\xbf \xeb`\xca>\x01\xd1\xbf;C#\xd8\x8a\x18\xc6?L\x8c\xdb\xedk;\xbf\xbf\x1d\xa2\xff/@\x1a\xc6\xbf:\\/u\xaf\xe1\x9c?\xa9:\xa5\x8f\xcf\'\xc4?\x86+\xb9\x7fA>\xd8\xbfW\xf6\xe5\xeb,\x13\xce?\xfe\x9dv\xe9\x0c\xd3\xad?\xa5ww\xbfa\xea\xa8?R\xcc\xed\x0f\xc5\x87\xd1?\x04\x91P \xc6\x03\xb0\xbfIx"\xd2r\x12\xc0?\xb3Z\x03E\xe8\xf0\xd1?R\xcd\xa8\x159\xbd\xaa\xbf\x03O\xda}Y\xf9\xd0\xbfT\xdcK>7_\xd0?\xc6\x8eU\xd0\xcb\xd2\x9b\xbf\xc5IY*r\xe2\xd1?\x16LH=\xe0K\xe1?bi\xb9\xc0.\xfe\xd6\xbf\'o\x17\xee\xdfc\xc3\xbf\x10\x8aD!m\xd8\xc2\xbf\x1f\xb7\x96\xfd\xfa\\\xc7\xbfa\x98\xa6\xce\x9e\x83\xc0?\xbdK\xb7\xf2\x0fU\xe0?\x99\xc7\x1eR\xa2\x14\\\xbf\xe7x\xdfD\x80\xa3~?\x1d\xfe\x00\xd4\x85-\xc4\xbf\xa2\x0bT4<2\xd7?zb\xa5{\xbc\x0c\xcb?\xc2\xfa\xfb\xd4\x1bK\xc5\xbf\xe7\xef\xa7\x95\x15\xea\xcc?\xa9\xcac,\xd0\xb0\xaf?d\x0e9\x1e\x80\xc2\xc7\xbf\xcb9o\x16d\xf9\xc9\xbf\x8f\xc3YM\xa0\x9f\xb1\xbf\xc1\xef\x81\x90\x90m\xcc?\x86\x1fj,\x96\xbb\xc7\xbf\x1dW\x7f`\x80p\xc9?\xd7/\r\xca\x8f_\x9c\xbf\x87V\xa8\t\x1b\x08\xc0\xbf\t\xd3\xea\xd0\x05 \xd7?dn].jD\xc0?\xe9*\\\x1bi\x04\xca\xbfX\xbb8q\xd1.\xd3?\x863\xf1\x05xA\xdb?K\xabb\x93\x10\x1b\xc4\xbf\xa1\xf7\xc0\xa5#\xf9\xc0\xbfw\x82\xcbU?\xb2\xc6\xbf\x87\xedy\x02\x94^\xd1\xbf\xd1\x898\xe6\xd8\x0e\xaf?i]G\xc6\xc5\x80\xd8?\x8ah\xbe\x94^D\xd3?\x1a+\xe7\xcf>\x9b\xcf?\x03\x90\xc7T\x03\xc1\xbb\xbf\xcd^\x15vi]\xb6\xbf\xdd\xebw\xac\x06\xf9\xd2\xbfn\xdc\xa0Po\x8c\xd8?nm\xeeV%y\xc2\xbf\xc2\xa0\x0e\xf5\x94f\xd8\xbf\xcd\xc1\xd9\xa1\x8f\\\xd1?\x08\xe9c\xd6\xff\xe2\xc0\xbfn\xb6\x8d%7t\xd0\xbfxA\x11~V\xa2\xc9\xbf\xb1\x82R\x90\xac\xf8\xc4?@\xd5\x04\x14\xe0 \xc5?{\x9a\xb23\xa4%\xcf\xbf\x05:\xc5X\xf2:\xb8?X\x9dR\xc6\xe4\xb0\x9a\xbf77\xddJ\n[\xcc\xbfIL\xbeu\xa7\x1c\xcc?\xc0\x17\x8c\xf2\x08U\xb4\xbf\x15\xe6<6g\xcd\xc1\xbfc\x85\xa5\xedD\x1f\xad\xbf\x1d\x1d] \xac/\xd2?Z6\x85\x1c\x10A\xc3?wV8\xd2-N\xbb\xbf\x93y\xf6\xf9\x85\xb8\xb0?\xd5\x1a\xfc\x9a\xa9\x8e\xcf?\x18/\x90A\xd1\xe9\xdf?\xe5\x8f\x97oS\xa8\xb9?\xc6\x99g\x00\xd0\xe4\xbc?U\xcd\xa6\xaa\xe4L\xc7\xbf\xaf\xdf\xb5N\xc12\xd3?\xed\x9a\xe6An\xa7\xc5\xbf\xf4*\xe9\'\xfay\xa7\xbf\xff\xc0\xef_Yz\xb2\xbf\x9e\xb3\xf2\x03\xdb\x8a\xc6\xbf\x03\x1bR \xae3\xc7?J\x84;\x1c5\x8c\xc6?\xb8S\x1f\xc0\xecF\xdb\xbf\xc8\x83\xbb\xcbr\xf1\xb9?\xe0v\x90$\xa3\xc8\xce\xbfyCE%k\x8c\xa4\xbf\xd9z\x94&\xbc\xca\xc6?Bi\xaf\xc3\xc4[\xad?\xcc\xa5\x93\xe5\x9cf\xb3?\xa1^\x92\x90\x10\x1c\xcc?\x01&\xc5l\xc9\xcb\xc1?2e\xca\r~I\xd2\xbf\xd1\x83\x9bWd\x13\xdb\xbf'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp2112
(dp2113
g143
(I00
I00
I00
I00
tp2114
sg144
S'float64'
p2115
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g2109
sg22
Nsg139
g2112
sbasg11
(itheano.gof.utils
scratchpad
p2116
(dp2117
bsg156
(lp2118
g720
asg158
g3
(g1368
g5
NtRp2119
(dp2120
g1371
(I2
I7
I7
I7
tp2121
sg1373
I01
sg1374
(I6
I7
I3
I3
tp2122
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp2123
(dp2124
g143
(I00
I00
I00
I00
tp2125
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2126
(dp2127
g8
S'auto_177'
p2128
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2129
(dp2130
g14
(lp2131
(lp2132
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp2133
aasbsg20
Nsg22
g3
(g23
g5
NtRp2134
(dp2135
g26
(lp2136
g3
(g1339
g5
NtRp2137
(dp2138
g8
S'auto_10'
p2139
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2140
(dp2141
g14
(lp2142
(lp2143
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp2144
aasbsg1350
g3
(g1351
g5
NtRp2145
(dp2146
g20
S'layer_3_unroll=0.b'
p2147
sg1355
(lp2148
g151
(g152
(I0
tS'b'
tRp2149
(I1
(I6
tg244
I00
S's@&{\xe4\xbc\xa5?\xc8\xb0J\xf7w!\x80\xbfC\x1a\xff\xe0\xfd\x87\xa5\xbf\xd4\xafIB\xa9\xc7\x95\xbfq\xa2 \xc9\x9e\xd1\xb6?\x88L\xc4f\xf0\xeb\xb4?'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp2150
(dp2151
g143
(I00
tp2152
sg144
S'float64'
p2153
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g2147
sg22
Nsg139
g2150
sbasg11
(itheano.gof.utils
scratchpad
p2154
(dp2155
bsg156
(lp2156
g2126
asg158
g3
(g159
g5
NtRp2157
(dp2158
g162
(lp2159
sg164
(lp2160
I0
asg166
(lp2161
I0
aI2
aI3
asg168
(I00
tp2162
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp2163
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2164
(dp2165
g143
(I01
I00
I01
I01
tp2166
sg144
g2153
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2167
(dp2168
bsg156
(lp2169
g709
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2170
(dp2171
g143
(I00
I00
I00
I00
tp2172
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2173
(dp2174
g8
S'auto_184'
p2175
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2176
(dp2177
g14
(lp2178
(lp2179
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp2180
aasbsg20
Nsg22
g3
(g23
g5
NtRp2181
(dp2182
g26
(lp2183
g709
asg11
(itheano.gof.utils
scratchpad
p2184
(dp2185
bsg156
(lp2186
g2173
asg158
g1444
sbsg139
g3
(g140
g5
NtRp2187
(dp2188
g143
(I00
I00
I00
I00
tp2189
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2190
(dp2191
bsg156
(lp2192
g698
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2193
(dp2194
g143
(I00
I00
I00
I00
tp2195
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2196
(dp2197
bsg156
(lp2198
g655
asg158
g1467
sbsg139
g3
(g140
g5
NtRp2199
(dp2200
g143
(I00
I00
I00
I00
tp2201
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2202
(dp2203
bsg156
(lp2204
g644
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp2205
(dp2206
g8
S'auto_196'
p2207
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2208
(dp2209
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2210
sbasg11
(itheano.gof.utils
scratchpad
p2211
(dp2212
bsg156
(lp2213
g633
asg158
g3
(g1040
g5
NtRp2214
(dp2215
g1043
(g1033
tp2216
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2217
(dp2218
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2219
(dp2220
g8
S'auto_199'
p2221
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2222
(dp2223
g14
(lp2224
(lp2225
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2226
aasbsg20
Nsg22
g3
(g23
g5
NtRp2227
(dp2228
g26
(lp2229
g644
ag3
(g1026
g5
NtRp2230
(dp2231
g8
S'auto_198'
p2232
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2233
(dp2234
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2235
sbasg11
(itheano.gof.utils
scratchpad
p2236
(dp2237
bsg156
(lp2238
g2219
asg158
g3
(g1040
g5
NtRp2239
(dp2240
g1043
(g1033
tp2241
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2242
(dp2243
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2244
(dp2245
g8
S'auto_208'
p2246
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2247
(dp2248
g14
(lp2249
(lp2250
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2251
aasbsg20
Nsg22
g3
(g23
g5
NtRp2252
(dp2253
g26
(lp2254
g3
(g4
g5
NtRp2255
(dp2256
g8
S'auto_201'
p2257
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2258
(dp2259
g14
(lp2260
(lp2261
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2262
aasbsg20
Nsg22
g3
(g23
g5
NtRp2263
(dp2264
g26
(lp2265
g644
ag3
(g1026
g5
NtRp2266
(dp2267
g8
S'auto_200'
p2268
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2269
(dp2270
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2271
sbasg11
(itheano.gof.utils
scratchpad
p2272
(dp2273
bsg156
(lp2274
g2255
asg158
g3
(g1040
g5
NtRp2275
(dp2276
g1043
(g1033
tp2277
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2278
(dp2279
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p2280
(dp2281
bsg156
(lp2282
g2244
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2283
(dp2284
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2285
(dp2286
g8
S'auto_220'
p2287
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2288
(dp2289
g14
(lp2290
(lp2291
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2292
aasbsg20
Nsg22
g3
(g23
g5
NtRp2293
(dp2294
g26
(lp2295
g3
(g4
g5
NtRp2296
(dp2297
g8
S'auto_203'
p2298
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2299
(dp2300
g14
(lp2301
(lp2302
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2303
aasbsg20
Nsg22
g3
(g23
g5
NtRp2304
(dp2305
g26
(lp2306
g644
ag3
(g1026
g5
NtRp2307
(dp2308
g8
S'auto_202'
p2309
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2310
(dp2311
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp2312
sbasg11
(itheano.gof.utils
scratchpad
p2313
(dp2314
bsg156
(lp2315
g2296
asg158
g3
(g1040
g5
NtRp2316
(dp2317
g1043
(g1033
tp2318
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2319
(dp2320
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p2321
(dp2322
bsg156
(lp2323
g2285
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2324
(dp2325
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2326
(dp2327
bsg156
(lp2328
g622
asg158
g1190
sbsg139
g3
(g140
g5
NtRp2329
(dp2330
g143
(I00
I00
I00
I00
tp2331
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag655
ag3
(g1026
g5
NtRp2332
(dp2333
g8
S'auto_230'
p2334
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2335
(dp2336
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2337
sbag3
(g1201
g5
NtRp2338
(dp2339
g8
S'auto_232'
p2340
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2341
(dp2342
bsg20
Nsg22
g3
(g23
g5
NtRp2343
(dp2344
g26
(lp2345
g3
(g4
g5
NtRp2346
(dp2347
g8
S'auto_215'
p2348
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2349
(dp2350
g14
(lp2351
(lp2352
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2353
aasbsg20
Nsg22
g3
(g23
g5
NtRp2354
(dp2355
g26
(lp2356
g1221
ag3
(g4
g5
NtRp2357
(dp2358
g8
S'auto_210'
p2359
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2360
(dp2361
g14
(lp2362
(lp2363
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2364
aasbsg20
Nsg22
g3
(g23
g5
NtRp2365
(dp2366
g26
(lp2367
g644
ag3
(g1026
g5
NtRp2368
(dp2369
g8
S'auto_209'
p2370
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2371
(dp2372
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2373
sbasg11
(itheano.gof.utils
scratchpad
p2374
(dp2375
bsg156
(lp2376
g2357
asg158
g3
(g1040
g5
NtRp2377
(dp2378
g1043
(g1033
tp2379
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2380
(dp2381
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2382
(dp2383
bsg156
(lp2384
g2346
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2385
(dp2386
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2387
(dp2388
bsg156
(lp2389
g2338
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp2390
(dp2391
g8
S'auto_231'
p2392
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2393
(dp2394
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2395
sbag3
(g1201
g5
NtRp2396
(dp2397
g8
S'auto_233'
p2398
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2399
(dp2400
bsg20
Nsg22
g3
(g23
g5
NtRp2401
(dp2402
g26
(lp2403
g3
(g4
g5
NtRp2404
(dp2405
g8
S'auto_227'
p2406
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2407
(dp2408
g14
(lp2409
(lp2410
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2411
aasbsg20
Nsg22
g3
(g23
g5
NtRp2412
(dp2413
g26
(lp2414
g1221
ag3
(g4
g5
NtRp2415
(dp2416
g8
S'auto_222'
p2417
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2418
(dp2419
g14
(lp2420
(lp2421
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2422
aasbsg20
Nsg22
g3
(g23
g5
NtRp2423
(dp2424
g26
(lp2425
g644
ag3
(g1026
g5
NtRp2426
(dp2427
g8
S'auto_221'
p2428
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2429
(dp2430
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp2431
sbasg11
(itheano.gof.utils
scratchpad
p2432
(dp2433
bsg156
(lp2434
g2415
asg158
g3
(g1040
g5
NtRp2435
(dp2436
g1043
(g1033
tp2437
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2438
(dp2439
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2440
(dp2441
bsg156
(lp2442
g2404
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2443
(dp2444
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2445
(dp2446
bsg156
(lp2447
g2396
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p2448
(dp2449
bsg156
(lp2450
g611
asg158
g3
(g1327
g5
NtRp2451
(dp2452
g1043
(lp2453
g1331
(NNNtRp2454
ag1331
(NNNtRp2455
ag1331
(g1033
g1033
NtRp2456
ag1331
(g1033
g1033
NtRp2457
asg1336
(lp2458
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g2329
sbag3
(g1339
g5
NtRp2459
(dp2460
g8
S'auto_11'
p2461
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2462
(dp2463
g14
(lp2464
(lp2465
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp2466
aasbsg1350
g3
(g1351
g5
NtRp2467
(dp2468
g20
S'loop_layer_1_unroll=0.W'
p2469
sg1355
(lp2470
g151
(g152
(I0
tS'b'
tRp2471
(I1
(I3
I6
I3
I3
tg244
I00
S'F\x0eYn\xce\xa0\xc8?\xda\xe4\x06\x84L\xc3\xcc?\x8a1\xb9d6Zb\xbf\x84\xd5U\x96l\x81\xce\xbf\x92H\xc7\xe0\xa8V\xcf?\x88\x19\xa1\xb2\xba}\xb8\xbf\x02\xfaw\xf1\xa9\xbf\x97?\x12\xdd\x1b\xd3\xb3c\xa9?C&\xbe \xf3(\xcf?\x9c\x8a\xe4\x9fP\xf5\xcd?\xb9cc\x93\xde\xfa\xcb\xbf\x8b\xad\x08\x16\xbf\x0b\xb8?\xbeZ\xf7\xcb+h\xb1?1\x1c\xab\xc8\x03q\xa4\xbf\xaa\xae\x97\xd0\x03\x86\xcc?\xd2G\x83\x00\x00\xf8\xbd?\xe7.r{7l\xcb\xbf!\xcaN\xf1J\xa7\xce\xbfn\xa2R\xa7\xc2\xca\xd4\xbf\xf9w\x90\xcd\x05\xe8\xc4\xbf\x16\xd1$\xf0\x1c\xb7\xd0?\'\xe8o\xf8\x92\x81\xd0\xbf\xa0\xa2\x9aH\xbfI\xcb?7\xc0!\x02\xf7H\xd9\xbf\xdb\xa8t\xcblD\xd1\xbfO:a\x82\x96\xdb\xda?`\r\xa5\xb0( \xd4?1{\xe48\x11\xc1\xd4?t^\xad\xfa\xc3\xc0\xba\xbf+\xc5s4M\x9c\xd0\xbf\x15\xf2\x1a\xabn\xbb\xc7\xbf\x86\xf8\xb1\xd4\xce\x9f\xd0\xbf\x9e\xdb\x0cf\xa9\xeb\xd2\xbfj\x1d\xdb\x129w\xbe\xbf\xf2v\xe2g\r\xa5\xc8\xbf\x90*\x07\xf6\x0c\xa6\x94?g;L\xfa\x1e\xd6\xb6?]\x15\xcb\x8b\x93\x99\xda\xbf\xe52\xe6b\x16\x98\xb1\xbf\x97**\xa6\xc6\x7f\xb5\xbf\xc6\xe9\xf7,Us\xc6?J\x8e\\\xb8\xc6\xa9\xca?\xc2\xc0\xfa\xac\x84\x88\xc8\xbf\xd8<ld\xed\xa4\xbf\xbfN\xd6\xe6\x95\xfbP\xda?\x8b\xbdz\xb6\x85\xb6\xd0\xbf&CC\xde\xa7\xea\xb9?\xfd\xdbt\xbc\x94\xd1\xdb?\x96\x96\xee\x91\x1e\x92\xcf?\xd5\xc4\xbe\xcf\x88\xe0\xd1?\xf1i\xd9\xe1\xad\xb2\x86?G\x01\x93tmO\xb7?SdIP\x8da\xd1\xbf\xd6M\xa9G\xf6\xb3\xd1\xbf\xcb\x97\xa6\xa3\xc1\x8f\xca?\x88\xee#\xa4\x92Z\xd8?\x8c4\xb6\xbcy\x8b\xb9\xbfwZ\x13\xb6\xe8\xe7\xd2?\xdct\xe8IT\xe9\xd1\xbf\xfb\xc98\xde\xe9w\xc3?7\x88\xf7M\x954r?\x8d\xd2&!\xab&\xcc?\xe0\xf3\x8c\xb1\xa4\xd3\xcc\xbf`\x16s\xb7,\x8f\xc0\xbf\xb51\xba\x1b\xf6p\xa0\xbf\xf2@\xd1\x14N\r\xd6?}K\x9b\xe5D\xe6\xca\xbf\x1co\x17\xcb\xf9\x18\xcb\xbfA<\x93\x8bsa\xd7\xbf\x95]\x02G[J\xd4?\x15\x88\x9f\\oQ\xbb\xbf4%q\x93\xec\xb3\xd7\xbf\xcc_.\xc7\x7f!\xae?\xff\xe3\xcf;i\x0e\xb3\xbf\x9a\x16\'\'\xc6e\xcb?>\x9aI\x06\xb5\xaa\xd9?\x7f|4\x17!\xb7\xcc\xbf\xac\xf46E\xa5\xff\xc9?X\x9b\xb2\'\xfb\xb5\xc4\xbf\x95nN\xbd\x98l\xb3?\xe5x\xa4\xb2{\r\xc0?3FJ\xab\x16f\xc0?\x98\xf7\xa8\xf8dJ\xdc\xbf\xd8\x90a\xcdD\xe7\xca\xbf\xc5\xbdy)Yi\xbc\xbfE76\xc7\x87\xd8\xcb\xbf\xbe*\x81\xd3\xe2b\xd6?\xa2\xf5\xae\xd2\xc9\xdb\xc9?_G2\xb6V\x04\xe0\xbf\xe8\xd3m\x82\xcd\xf9\xc6?\xfca\x7f\xael^\xc5?X\x81q\xf4\x1e{\xa9?\xad\'\xc5\xff\n\xa4\xdb\xbf\x86\x95i\xf2]I\xa2?\x7f\x9b-\xe1\x97%\xda\xbf4\x8ah\xfe\x10\xe0\xc2\xbf5c}.\x04\xae\xc8\xbf\xb3\xb9U/j\x80\xd0\xbf\xb5\r~>\x12\x0c\xda\xbf\x04\xca\xbd\xacn\xd5\xd2\xbf\x94\xd8\xe2\xa4;\xc5\x87\xbf\x0eh\x9a\xb7\xed\xbc\xd2?y\xed\x1fT\x14\x15\xd1?\x97J\x9cD8~\xd9?\xdeZ\\\xf8[y\xd4?\x1e\xed.B3\xce\xc4\xbf\xc8\x03\x8f\xe7\x85\xa5\xb9?\xc3Q\x8e\xb7\xee]\xd6?\x03\x0c[45s\xd4\xbf\xccs\xa4\x0e\xc9\xc3\xcd\xbf\xe1\xd4\xfc\x86\xab6\xda?\xf3zt\xc1%|\xd0\xbf6d\xc7f\xd7O\xd5\xbf\xb5+\x15\xe7\xa5\xd8\xc0?\x8a\xf1\xfa?\xe6\x0e\xbd?\x08\t<\x12\xf5\x87\x80?\xc2!m\xf7\xb5\x07\xd6\xbf\x12\x9d\xdan\xc9\x97\xbd\xbf.\xbe\x0e\xf3\x9c\xd1\xc2\xbf\xd6$a\xeb|\xad\xd4?\x13\xc2\x8d2\x01\xe6\xd2?\x15\x95\xa6=\xdb\xa0\xd8?\xcb\x86t\xdd5\xe7\xc4?l\xb5\x0f0\xc1\x92\x90?:\xce)\x8a\xf9\x17\xd5\xbfE\x82\x9a\xfe@\xeb\xd5\xbf\xe1\x99\x80\xbco\x89\xc0\xbf)\xceNQ\x8a\xd4\xd7?\xbc\x92\x95\xa4\x98\xbd\xad?c\x11-\x88\x98\x8d\xad?\xf0\xb3QE\xc3\xeb\xd0?\xcd\x0eGL\xae\xb1\xd1?\x188R\x93\x91\xfb\xcc?\xe4mt0\x98*\xcd\xbf(DM\x89A\x92\xd7?\xdf\xc6\xdcU~d\xd6?\xf0\x0cV\x14\x18\xea\xc2\xbf%\x1f\xf6\\i\x02\xc5?\xbe\t\xeb\x8d\x81F\xac?\x1bNY\xdd\xedi\xa8\xbf\x10\x81\xbc\xf9\xa8b\xc2\xbf\xef\x9db<k\x16\xc7\xbf\x12\x82\x92C\xc2\xee\xd3\xbfU^\xc5N\x95R\xd0?\xc2yr\x91\x1a\x82\xc0?\xba\x03\xad\xb2\xbaA\xdb\xbfqf\xe9\xd5\xe1*\xe2?\x0e\xfe\xfe"?\x13\xc7?T\xc0>V\xb4L\xb6?>FC\x1f\xd5\x82\xd8?\x95m;\xf1\xf6e\xd4\xbf\x9am\xb0c8\xb6\xdb\xbf^\xd9\x13\x1b\xac*\xb2\xbfH\xd6\xe5\xe4d\xe4\xc8\xbf\xf4CB\x9a\x8d\xdc\xe0?\x96\xaajv\x99\x96\xcd?\x8e\xd1\x8d\xee\x9e\xfa\xcf\xbfO\xd6\x05\xd3-v\xe3?\xcfu<\xd4Z\x1c\x9a\xbf\xe1\xf8\xc0\x98\xed\xe0\xa4\xbf7Qg\x12\x84\x90\xca\xbfi\xce\xaf-\xae_\xb0\xbf'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp2472
(dp2473
g143
(I00
I00
I00
I00
tp2474
sg144
S'float64'
p2475
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g2469
sg22
Nsg139
g2472
sbasg11
(itheano.gof.utils
scratchpad
p2476
(dp2477
bsg156
(lp2478
g600
asg158
g3
(g1368
g5
NtRp2479
(dp2480
g1371
(I2
I6
I7
I7
tp2481
sg1373
I01
sg1374
(I3
I6
I3
I3
tp2482
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp2483
(dp2484
g143
(I00
I00
I00
I00
tp2485
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2486
(dp2487
g8
S'auto_237'
p2488
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2489
(dp2490
g14
(lp2491
(lp2492
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp2493
aasbsg20
Nsg22
g3
(g23
g5
NtRp2494
(dp2495
g26
(lp2496
g3
(g1339
g5
NtRp2497
(dp2498
g8
S'auto_12'
p2499
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2500
(dp2501
g14
(lp2502
(lp2503
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp2504
aasbsg1350
g3
(g1351
g5
NtRp2505
(dp2506
g20
S'loop_layer_1_unroll=0.b'
p2507
sg1355
(lp2508
g151
(g152
(I0
tS'b'
tRp2509
(I1
(I3
tg244
I00
S'}\xa6&\xa8)\xd2\x85\xbfq\xa4\xab!qx\xa7?\xc5\xa3\x80^\xb3\xa0\xa0?'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp2510
(dp2511
g143
(I00
tp2512
sg144
S'float64'
p2513
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g2507
sg22
Nsg139
g2510
sbasg11
(itheano.gof.utils
scratchpad
p2514
(dp2515
bsg156
(lp2516
g2486
asg158
g3
(g159
g5
NtRp2517
(dp2518
g162
(lp2519
sg164
(lp2520
I0
asg166
(lp2521
I0
aI2
aI3
asg168
(I00
tp2522
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp2523
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2524
(dp2525
g143
(I01
I00
I01
I01
tp2526
sg144
g2513
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2527
(dp2528
bsg156
(lp2529
g589
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2530
(dp2531
g143
(I00
I00
I00
I00
tp2532
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2533
(dp2534
g8
S'auto_244'
p2535
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2536
(dp2537
g14
(lp2538
(lp2539
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp2540
aasbsg20
Nsg22
g3
(g23
g5
NtRp2541
(dp2542
g26
(lp2543
g589
asg11
(itheano.gof.utils
scratchpad
p2544
(dp2545
bsg156
(lp2546
g2533
asg158
g1444
sbsg139
g3
(g140
g5
NtRp2547
(dp2548
g143
(I00
I00
I00
I00
tp2549
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2550
(dp2551
bsg156
(lp2552
g578
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2553
(dp2554
g143
(I00
I00
I00
I00
tp2555
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2556
(dp2557
bsg156
(lp2558
g535
asg158
g1467
sbsg139
g3
(g140
g5
NtRp2559
(dp2560
g143
(I00
I00
I00
I00
tp2561
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2562
(dp2563
bsg156
(lp2564
g508
asg158
g1467
sbsg139
g3
(g140
g5
NtRp2565
(dp2566
g143
(I00
I00
I00
I00
tp2567
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2568
(dp2569
bsg156
(lp2570
g497
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp2571
(dp2572
g8
S'auto_260'
p2573
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2574
(dp2575
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2576
sbasg11
(itheano.gof.utils
scratchpad
p2577
(dp2578
bsg156
(lp2579
g486
asg158
g3
(g1040
g5
NtRp2580
(dp2581
g1043
(g1033
tp2582
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2583
(dp2584
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2585
(dp2586
g8
S'auto_263'
p2587
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2588
(dp2589
g14
(lp2590
(lp2591
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2592
aasbsg20
Nsg22
g3
(g23
g5
NtRp2593
(dp2594
g26
(lp2595
g497
ag3
(g1026
g5
NtRp2596
(dp2597
g8
S'auto_262'
p2598
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2599
(dp2600
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2601
sbasg11
(itheano.gof.utils
scratchpad
p2602
(dp2603
bsg156
(lp2604
g2585
asg158
g3
(g1040
g5
NtRp2605
(dp2606
g1043
(g1033
tp2607
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2608
(dp2609
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2610
(dp2611
g8
S'auto_272'
p2612
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2613
(dp2614
g14
(lp2615
(lp2616
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2617
aasbsg20
Nsg22
g3
(g23
g5
NtRp2618
(dp2619
g26
(lp2620
g3
(g4
g5
NtRp2621
(dp2622
g8
S'auto_265'
p2623
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2624
(dp2625
g14
(lp2626
(lp2627
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2628
aasbsg20
Nsg22
g3
(g23
g5
NtRp2629
(dp2630
g26
(lp2631
g497
ag3
(g1026
g5
NtRp2632
(dp2633
g8
S'auto_264'
p2634
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2635
(dp2636
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2637
sbasg11
(itheano.gof.utils
scratchpad
p2638
(dp2639
bsg156
(lp2640
g2621
asg158
g3
(g1040
g5
NtRp2641
(dp2642
g1043
(g1033
tp2643
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2644
(dp2645
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p2646
(dp2647
bsg156
(lp2648
g2610
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2649
(dp2650
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2651
(dp2652
g8
S'auto_284'
p2653
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2654
(dp2655
g14
(lp2656
(lp2657
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2658
aasbsg20
Nsg22
g3
(g23
g5
NtRp2659
(dp2660
g26
(lp2661
g3
(g4
g5
NtRp2662
(dp2663
g8
S'auto_267'
p2664
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2665
(dp2666
g14
(lp2667
(lp2668
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2669
aasbsg20
Nsg22
g3
(g23
g5
NtRp2670
(dp2671
g26
(lp2672
g497
ag3
(g1026
g5
NtRp2673
(dp2674
g8
S'auto_266'
p2675
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2676
(dp2677
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp2678
sbasg11
(itheano.gof.utils
scratchpad
p2679
(dp2680
bsg156
(lp2681
g2662
asg158
g3
(g1040
g5
NtRp2682
(dp2683
g1043
(g1033
tp2684
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2685
(dp2686
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p2687
(dp2688
bsg156
(lp2689
g2651
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2690
(dp2691
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2692
(dp2693
bsg156
(lp2694
g475
asg158
g1190
sbsg139
g3
(g140
g5
NtRp2695
(dp2696
g143
(I00
I00
I00
I00
tp2697
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag508
ag3
(g1026
g5
NtRp2698
(dp2699
g8
S'auto_294'
p2700
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2701
(dp2702
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2703
sbag3
(g1201
g5
NtRp2704
(dp2705
g8
S'auto_296'
p2706
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2707
(dp2708
bsg20
Nsg22
g3
(g23
g5
NtRp2709
(dp2710
g26
(lp2711
g3
(g4
g5
NtRp2712
(dp2713
g8
S'auto_279'
p2714
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2715
(dp2716
g14
(lp2717
(lp2718
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2719
aasbsg20
Nsg22
g3
(g23
g5
NtRp2720
(dp2721
g26
(lp2722
g1221
ag3
(g4
g5
NtRp2723
(dp2724
g8
S'auto_274'
p2725
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2726
(dp2727
g14
(lp2728
(lp2729
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2730
aasbsg20
Nsg22
g3
(g23
g5
NtRp2731
(dp2732
g26
(lp2733
g497
ag3
(g1026
g5
NtRp2734
(dp2735
g8
S'auto_273'
p2736
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2737
(dp2738
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2739
sbasg11
(itheano.gof.utils
scratchpad
p2740
(dp2741
bsg156
(lp2742
g2723
asg158
g3
(g1040
g5
NtRp2743
(dp2744
g1043
(g1033
tp2745
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2746
(dp2747
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2748
(dp2749
bsg156
(lp2750
g2712
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2751
(dp2752
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2753
(dp2754
bsg156
(lp2755
g2704
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp2756
(dp2757
g8
S'auto_295'
p2758
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2759
(dp2760
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2761
sbag3
(g1201
g5
NtRp2762
(dp2763
g8
S'auto_297'
p2764
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2765
(dp2766
bsg20
Nsg22
g3
(g23
g5
NtRp2767
(dp2768
g26
(lp2769
g3
(g4
g5
NtRp2770
(dp2771
g8
S'auto_291'
p2772
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2773
(dp2774
g14
(lp2775
(lp2776
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2777
aasbsg20
Nsg22
g3
(g23
g5
NtRp2778
(dp2779
g26
(lp2780
g1221
ag3
(g4
g5
NtRp2781
(dp2782
g8
S'auto_286'
p2783
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2784
(dp2785
g14
(lp2786
(lp2787
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp2788
aasbsg20
Nsg22
g3
(g23
g5
NtRp2789
(dp2790
g26
(lp2791
g497
ag3
(g1026
g5
NtRp2792
(dp2793
g8
S'auto_285'
p2794
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2795
(dp2796
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp2797
sbasg11
(itheano.gof.utils
scratchpad
p2798
(dp2799
bsg156
(lp2800
g2781
asg158
g3
(g1040
g5
NtRp2801
(dp2802
g1043
(g1033
tp2803
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2804
(dp2805
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2806
(dp2807
bsg156
(lp2808
g2770
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2809
(dp2810
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2811
(dp2812
bsg156
(lp2813
g2762
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p2814
(dp2815
bsg156
(lp2816
g464
asg158
g3
(g1327
g5
NtRp2817
(dp2818
g1043
(lp2819
g1331
(NNNtRp2820
ag1331
(NNNtRp2821
ag1331
(g1033
g1033
NtRp2822
ag1331
(g1033
g1033
NtRp2823
asg1336
(lp2824
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g2695
sbag1340
asg11
(itheano.gof.utils
scratchpad
p2825
(dp2826
bsg156
(lp2827
g453
asg158
g3
(g1368
g5
NtRp2828
(dp2829
g1371
(I2
I3
I7
I7
tp2830
sg1373
I01
sg1374
(I4
I3
I3
I3
tp2831
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp2832
(dp2833
g143
(I00
I00
I00
I00
tp2834
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2835
(dp2836
g8
S'auto_301'
p2837
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2838
(dp2839
g14
(lp2840
(lp2841
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp2842
aasbsg20
Nsg22
g3
(g23
g5
NtRp2843
(dp2844
g26
(lp2845
g1394
asg11
(itheano.gof.utils
scratchpad
p2846
(dp2847
bsg156
(lp2848
g2835
asg158
g3
(g159
g5
NtRp2849
(dp2850
g162
(lp2851
sg164
(lp2852
I0
asg166
(lp2853
I0
aI2
aI3
asg168
(I00
tp2854
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp2855
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2856
(dp2857
g143
(I01
I00
I01
I01
tp2858
sg144
g1410
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2859
(dp2860
bsg156
(lp2861
g442
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2862
(dp2863
g143
(I00
I00
I00
I00
tp2864
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2865
(dp2866
g8
S'auto_308'
p2867
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2868
(dp2869
g14
(lp2870
(lp2871
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp2872
aasbsg20
Nsg22
g3
(g23
g5
NtRp2873
(dp2874
g26
(lp2875
g442
asg11
(itheano.gof.utils
scratchpad
p2876
(dp2877
bsg156
(lp2878
g2865
asg158
g1444
sbsg139
g3
(g140
g5
NtRp2879
(dp2880
g143
(I00
I00
I00
I00
tp2881
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2882
(dp2883
bsg156
(lp2884
g431
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2885
(dp2886
g143
(I00
I00
I00
I00
tp2887
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2888
(dp2889
bsg156
(lp2890
g388
asg158
g1467
sbsg139
g3
(g140
g5
NtRp2891
(dp2892
g143
(I00
I00
I00
I00
tp2893
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p2894
(dp2895
bsg156
(lp2896
g377
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp2897
(dp2898
g8
S'auto_320'
p2899
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2900
(dp2901
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2902
sbasg11
(itheano.gof.utils
scratchpad
p2903
(dp2904
bsg156
(lp2905
g366
asg158
g3
(g1040
g5
NtRp2906
(dp2907
g1043
(g1033
tp2908
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2909
(dp2910
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2911
(dp2912
g8
S'auto_323'
p2913
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2914
(dp2915
g14
(lp2916
(lp2917
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2918
aasbsg20
Nsg22
g3
(g23
g5
NtRp2919
(dp2920
g26
(lp2921
g377
ag3
(g1026
g5
NtRp2922
(dp2923
g8
S'auto_322'
p2924
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2925
(dp2926
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2927
sbasg11
(itheano.gof.utils
scratchpad
p2928
(dp2929
bsg156
(lp2930
g2911
asg158
g3
(g1040
g5
NtRp2931
(dp2932
g1043
(g1033
tp2933
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2934
(dp2935
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2936
(dp2937
g8
S'auto_332'
p2938
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2939
(dp2940
g14
(lp2941
(lp2942
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2943
aasbsg20
Nsg22
g3
(g23
g5
NtRp2944
(dp2945
g26
(lp2946
g3
(g4
g5
NtRp2947
(dp2948
g8
S'auto_325'
p2949
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2950
(dp2951
g14
(lp2952
(lp2953
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2954
aasbsg20
Nsg22
g3
(g23
g5
NtRp2955
(dp2956
g26
(lp2957
g377
ag3
(g1026
g5
NtRp2958
(dp2959
g8
S'auto_324'
p2960
sg10
Nsg11
(itheano.gof.utils
scratchpad
p2961
(dp2962
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2963
sbasg11
(itheano.gof.utils
scratchpad
p2964
(dp2965
bsg156
(lp2966
g2947
asg158
g3
(g1040
g5
NtRp2967
(dp2968
g1043
(g1033
tp2969
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp2970
(dp2971
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p2972
(dp2973
bsg156
(lp2974
g2936
asg158
g1122
sbsg139
g3
(g140
g5
NtRp2975
(dp2976
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp2977
(dp2978
g8
S'auto_344'
p2979
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2980
(dp2981
g14
(lp2982
(lp2983
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp2984
aasbsg20
Nsg22
g3
(g23
g5
NtRp2985
(dp2986
g26
(lp2987
g3
(g4
g5
NtRp2988
(dp2989
g8
S'auto_327'
p2990
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p2991
(dp2992
g14
(lp2993
(lp2994
(g218
I33
g219
S'output_shape = list(input_shape)'
tp2995
aasbsg20
Nsg22
g3
(g23
g5
NtRp2996
(dp2997
g26
(lp2998
g377
ag3
(g1026
g5
NtRp2999
(dp3000
g8
S'auto_326'
p3001
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3002
(dp3003
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp3004
sbasg11
(itheano.gof.utils
scratchpad
p3005
(dp3006
bsg156
(lp3007
g2988
asg158
g3
(g1040
g5
NtRp3008
(dp3009
g1043
(g1033
tp3010
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3011
(dp3012
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p3013
(dp3014
bsg156
(lp3015
g2977
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3016
(dp3017
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3018
(dp3019
bsg156
(lp3020
g355
asg158
g1190
sbsg139
g3
(g140
g5
NtRp3021
(dp3022
g143
(I00
I00
I00
I00
tp3023
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag388
ag3
(g1026
g5
NtRp3024
(dp3025
g8
S'auto_354'
p3026
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3027
(dp3028
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3029
sbag3
(g1201
g5
NtRp3030
(dp3031
g8
S'auto_356'
p3032
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3033
(dp3034
bsg20
Nsg22
g3
(g23
g5
NtRp3035
(dp3036
g26
(lp3037
g3
(g4
g5
NtRp3038
(dp3039
g8
S'auto_339'
p3040
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3041
(dp3042
g14
(lp3043
(lp3044
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3045
aasbsg20
Nsg22
g3
(g23
g5
NtRp3046
(dp3047
g26
(lp3048
g1221
ag3
(g4
g5
NtRp3049
(dp3050
g8
S'auto_334'
p3051
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3052
(dp3053
g14
(lp3054
(lp3055
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3056
aasbsg20
Nsg22
g3
(g23
g5
NtRp3057
(dp3058
g26
(lp3059
g377
ag3
(g1026
g5
NtRp3060
(dp3061
g8
S'auto_333'
p3062
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3063
(dp3064
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp3065
sbasg11
(itheano.gof.utils
scratchpad
p3066
(dp3067
bsg156
(lp3068
g3049
asg158
g3
(g1040
g5
NtRp3069
(dp3070
g1043
(g1033
tp3071
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3072
(dp3073
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3074
(dp3075
bsg156
(lp3076
g3038
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3077
(dp3078
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3079
(dp3080
bsg156
(lp3081
g3030
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp3082
(dp3083
g8
S'auto_355'
p3084
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3085
(dp3086
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3087
sbag3
(g1201
g5
NtRp3088
(dp3089
g8
S'auto_357'
p3090
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3091
(dp3092
bsg20
Nsg22
g3
(g23
g5
NtRp3093
(dp3094
g26
(lp3095
g3
(g4
g5
NtRp3096
(dp3097
g8
S'auto_351'
p3098
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3099
(dp3100
g14
(lp3101
(lp3102
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3103
aasbsg20
Nsg22
g3
(g23
g5
NtRp3104
(dp3105
g26
(lp3106
g1221
ag3
(g4
g5
NtRp3107
(dp3108
g8
S'auto_346'
p3109
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3110
(dp3111
g14
(lp3112
(lp3113
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3114
aasbsg20
Nsg22
g3
(g23
g5
NtRp3115
(dp3116
g26
(lp3117
g377
ag3
(g1026
g5
NtRp3118
(dp3119
g8
S'auto_345'
p3120
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3121
(dp3122
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp3123
sbasg11
(itheano.gof.utils
scratchpad
p3124
(dp3125
bsg156
(lp3126
g3107
asg158
g3
(g1040
g5
NtRp3127
(dp3128
g1043
(g1033
tp3129
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3130
(dp3131
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3132
(dp3133
bsg156
(lp3134
g3096
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3135
(dp3136
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3137
(dp3138
bsg156
(lp3139
g3088
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p3140
(dp3141
bsg156
(lp3142
g344
asg158
g3
(g1327
g5
NtRp3143
(dp3144
g1043
(lp3145
g1331
(NNNtRp3146
ag1331
(NNNtRp3147
ag1331
(g1033
g1033
NtRp3148
ag1331
(g1033
g1033
NtRp3149
asg1336
(lp3150
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g3021
sbag1739
asg11
(itheano.gof.utils
scratchpad
p3151
(dp3152
bsg156
(lp3153
g333
asg158
g3
(g1368
g5
NtRp3154
(dp3155
g1371
(I2
I4
I7
I7
tp3156
sg1373
I01
sg1374
(I7
I4
I3
I3
tp3157
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp3158
(dp3159
g143
(I00
I00
I00
I00
tp3160
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3161
(dp3162
g8
S'auto_361'
p3163
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3164
(dp3165
g14
(lp3166
(lp3167
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp3168
aasbsg20
Nsg22
g3
(g23
g5
NtRp3169
(dp3170
g26
(lp3171
g1777
asg11
(itheano.gof.utils
scratchpad
p3172
(dp3173
bsg156
(lp3174
g3161
asg158
g3
(g159
g5
NtRp3175
(dp3176
g162
(lp3177
sg164
(lp3178
I0
asg166
(lp3179
I0
aI2
aI3
asg168
(I00
tp3180
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp3181
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3182
(dp3183
g143
(I01
I00
I01
I01
tp3184
sg144
g1793
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3185
(dp3186
bsg156
(lp3187
g322
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3188
(dp3189
g143
(I00
I00
I00
I00
tp3190
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3191
(dp3192
g8
S'auto_368'
p3193
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3194
(dp3195
g14
(lp3196
(lp3197
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp3198
aasbsg20
Nsg22
g3
(g23
g5
NtRp3199
(dp3200
g26
(lp3201
g322
asg11
(itheano.gof.utils
scratchpad
p3202
(dp3203
bsg156
(lp3204
g3191
asg158
g1444
sbsg139
g3
(g140
g5
NtRp3205
(dp3206
g143
(I00
I00
I00
I00
tp3207
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3208
(dp3209
bsg156
(lp3210
g311
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3211
(dp3212
g143
(I00
I00
I00
I00
tp3213
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3214
(dp3215
bsg156
(lp3216
g268
asg158
g1467
sbsg139
g3
(g140
g5
NtRp3217
(dp3218
g143
(I00
I00
I00
I00
tp3219
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3220
(dp3221
bsg156
(lp3222
g257
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp3223
(dp3224
g8
S'auto_380'
p3225
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3226
(dp3227
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3228
sbasg11
(itheano.gof.utils
scratchpad
p3229
(dp3230
bsg156
(lp3231
g246
asg158
g3
(g1040
g5
NtRp3232
(dp3233
g1043
(g1033
tp3234
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3235
(dp3236
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3237
(dp3238
g8
S'auto_383'
p3239
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3240
(dp3241
g14
(lp3242
(lp3243
(g218
I33
g219
S'output_shape = list(input_shape)'
tp3244
aasbsg20
Nsg22
g3
(g23
g5
NtRp3245
(dp3246
g26
(lp3247
g257
ag3
(g1026
g5
NtRp3248
(dp3249
g8
S'auto_382'
p3250
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3251
(dp3252
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3253
sbasg11
(itheano.gof.utils
scratchpad
p3254
(dp3255
bsg156
(lp3256
g3237
asg158
g3
(g1040
g5
NtRp3257
(dp3258
g1043
(g1033
tp3259
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3260
(dp3261
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3262
(dp3263
g8
S'auto_392'
p3264
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3265
(dp3266
g14
(lp3267
(lp3268
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp3269
aasbsg20
Nsg22
g3
(g23
g5
NtRp3270
(dp3271
g26
(lp3272
g3
(g4
g5
NtRp3273
(dp3274
g8
S'auto_385'
p3275
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3276
(dp3277
g14
(lp3278
(lp3279
(g218
I33
g219
S'output_shape = list(input_shape)'
tp3280
aasbsg20
Nsg22
g3
(g23
g5
NtRp3281
(dp3282
g26
(lp3283
g257
ag3
(g1026
g5
NtRp3284
(dp3285
g8
S'auto_384'
p3286
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3287
(dp3288
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp3289
sbasg11
(itheano.gof.utils
scratchpad
p3290
(dp3291
bsg156
(lp3292
g3273
asg158
g3
(g1040
g5
NtRp3293
(dp3294
g1043
(g1033
tp3295
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3296
(dp3297
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p3298
(dp3299
bsg156
(lp3300
g3262
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3301
(dp3302
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3303
(dp3304
g8
S'auto_404'
p3305
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3306
(dp3307
g14
(lp3308
(lp3309
(g218
I46
g219
S'output_shape[k + batch_ndim] += l + r'
tp3310
aasbsg20
Nsg22
g3
(g23
g5
NtRp3311
(dp3312
g26
(lp3313
g3
(g4
g5
NtRp3314
(dp3315
g8
S'auto_387'
p3316
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3317
(dp3318
g14
(lp3319
(lp3320
(g218
I33
g219
S'output_shape = list(input_shape)'
tp3321
aasbsg20
Nsg22
g3
(g23
g5
NtRp3322
(dp3323
g26
(lp3324
g257
ag3
(g1026
g5
NtRp3325
(dp3326
g8
S'auto_386'
p3327
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3328
(dp3329
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp3330
sbasg11
(itheano.gof.utils
scratchpad
p3331
(dp3332
bsg156
(lp3333
g3314
asg158
g3
(g1040
g5
NtRp3334
(dp3335
g1043
(g1033
tp3336
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3337
(dp3338
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag1108
asg11
(itheano.gof.utils
scratchpad
p3339
(dp3340
bsg156
(lp3341
g3303
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3342
(dp3343
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3344
(dp3345
bsg156
(lp3346
g224
asg158
g1190
sbsg139
g3
(g140
g5
NtRp3347
(dp3348
g143
(I00
I00
I00
I00
tp3349
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag268
ag3
(g1026
g5
NtRp3350
(dp3351
g8
S'auto_414'
p3352
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3353
(dp3354
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3355
sbag3
(g1201
g5
NtRp3356
(dp3357
g8
S'auto_416'
p3358
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3359
(dp3360
bsg20
Nsg22
g3
(g23
g5
NtRp3361
(dp3362
g26
(lp3363
g3
(g4
g5
NtRp3364
(dp3365
g8
S'auto_399'
p3366
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3367
(dp3368
g14
(lp3369
(lp3370
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3371
aasbsg20
Nsg22
g3
(g23
g5
NtRp3372
(dp3373
g26
(lp3374
g1221
ag3
(g4
g5
NtRp3375
(dp3376
g8
S'auto_394'
p3377
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3378
(dp3379
g14
(lp3380
(lp3381
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3382
aasbsg20
Nsg22
g3
(g23
g5
NtRp3383
(dp3384
g26
(lp3385
g257
ag3
(g1026
g5
NtRp3386
(dp3387
g8
S'auto_393'
p3388
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3389
(dp3390
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp3391
sbasg11
(itheano.gof.utils
scratchpad
p3392
(dp3393
bsg156
(lp3394
g3375
asg158
g3
(g1040
g5
NtRp3395
(dp3396
g1043
(g1033
tp3397
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3398
(dp3399
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3400
(dp3401
bsg156
(lp3402
g3364
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3403
(dp3404
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3405
(dp3406
bsg156
(lp3407
g3356
asg158
g1264
sbsg139
g1033
sbag3
(g1026
g5
NtRp3408
(dp3409
g8
S'auto_415'
p3410
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3411
(dp3412
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3413
sbag3
(g1201
g5
NtRp3414
(dp3415
g8
S'auto_417'
p3416
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3417
(dp3418
bsg20
Nsg22
g3
(g23
g5
NtRp3419
(dp3420
g26
(lp3421
g3
(g4
g5
NtRp3422
(dp3423
g8
S'auto_411'
p3424
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3425
(dp3426
g14
(lp3427
(lp3428
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3429
aasbsg20
Nsg22
g3
(g23
g5
NtRp3430
(dp3431
g26
(lp3432
g1221
ag3
(g4
g5
NtRp3433
(dp3434
g8
S'auto_406'
p3435
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3436
(dp3437
g14
(lp3438
(lp3439
(g218
I47
g219
S'indices[k + batch_ndim] = slice(l, l + input_shape[k + batch_ndim])'
tp3440
aasbsg20
Nsg22
g3
(g23
g5
NtRp3441
(dp3442
g26
(lp3443
g257
ag3
(g1026
g5
NtRp3444
(dp3445
g8
S'auto_405'
p3446
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3447
(dp3448
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp3449
sbasg11
(itheano.gof.utils
scratchpad
p3450
(dp3451
bsg156
(lp3452
g3433
asg158
g3
(g1040
g5
NtRp3453
(dp3454
g1043
(g1033
tp3455
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3456
(dp3457
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3458
(dp3459
bsg156
(lp3460
g3422
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3461
(dp3462
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3463
(dp3464
bsg156
(lp3465
g3414
asg158
g1264
sbsg139
g1033
sbasg11
(itheano.gof.utils
scratchpad
p3466
(dp3467
bsg156
(lp3468
g211
asg158
g3
(g1327
g5
NtRp3469
(dp3470
g1043
(lp3471
g1331
(NNNtRp3472
ag1331
(NNNtRp3473
ag1331
(g1033
g1033
NtRp3474
ag1331
(g1033
g1033
NtRp3475
asg1336
(lp3476
sg172
g173
sg1338
I01
sg169
I00
sbsbsg139
g3347
sbag2099
asg11
(itheano.gof.utils
scratchpad
p3477
(dp3478
bsg156
(lp3479
g200
asg158
g3
(g1368
g5
NtRp3480
(dp3481
g1371
(I2
I7
I7
I7
tp3482
sg1373
I01
sg1374
(I6
I7
I3
I3
tp3483
sg1376
g1377
sg172
g173
sg1378
g1379
sbsbsg139
g3
(g140
g5
NtRp3484
(dp3485
g143
(I00
I00
I00
I00
tp3486
sg144
g243
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3487
(dp3488
g8
S'auto_421'
p3489
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3490
(dp3491
g14
(lp3492
(lp3493
(g195
I496
g71
S"activation = conved + self.b.dimshuffle('x', 0, 'x', 'x')"
tp3494
aasbsg20
Nsg22
g3
(g23
g5
NtRp3495
(dp3496
g26
(lp3497
g2137
asg11
(itheano.gof.utils
scratchpad
p3498
(dp3499
bsg156
(lp3500
g3487
asg158
g3
(g159
g5
NtRp3501
(dp3502
g162
(lp3503
sg164
(lp3504
I0
asg166
(lp3505
I0
aI2
aI3
asg168
(I00
tp3506
sg169
I00
sg170
(S'x'
I0
S'x'
S'x'
tp3507
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3508
(dp3509
g143
(I01
I00
I01
I01
tp3510
sg144
g2153
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3511
(dp3512
bsg156
(lp3513
g188
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3514
(dp3515
g143
(I00
I00
I00
I00
tp3516
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3517
(dp3518
g8
S'auto_428'
p3519
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3520
(dp3521
g14
(lp3522
(lp3523
(g115
I81
g116
S'return 0.5 * (x + abs(x))'
tp3524
aasbsg20
Nsg22
g3
(g23
g5
NtRp3525
(dp3526
g26
(lp3527
g188
asg11
(itheano.gof.utils
scratchpad
p3528
(dp3529
bsg156
(lp3530
g3517
asg158
g1444
sbsg139
g3
(g140
g5
NtRp3531
(dp3532
g143
(I00
I00
I00
I00
tp3533
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3534
(dp3535
bsg156
(lp3536
g177
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3537
(dp3538
g143
(I00
I00
I00
I00
tp3539
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3540
(dp3541
bsg156
(lp3542
g108
asg158
g1467
sbsg139
g3
(g140
g5
NtRp3543
(dp3544
g143
(I00
I00
I00
I00
tp3545
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3546
(dp3547
bsg156
(lp3548
g96
asg158
g3
(ctheano.tensor.signal.downsample
DownsampleFactorMax
p3549
g5
NtRp3550
(dp3551
S'st'
p3552
(I2
I2
tp3553
sS'padding'
p3554
(I0
I0
tp3555
sS'mode'
p3556
S'max'
p3557
sS'ignore_border'
p3558
I01
sg172
g173
sS'ds'
p3559
g3553
sbsbsg139
g3
(g140
g5
NtRp3560
(dp3561
g143
(I00
I00
I00
I00
tp3562
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3563
(dp3564
g8
S'auto_452'
p3565
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3566
(dp3567
g14
(lp3568
sbsg20
Nsg22
g3
(g23
g5
NtRp3569
(dp3570
g26
(lp3571
g3
(g4
g5
NtRp3572
(dp3573
g8
S'auto_444'
p3574
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3575
(dp3576
g14
(lp3577
sbsg20
Nsg22
g3
(g23
g5
NtRp3578
(dp3579
g26
(lp3580
g3
(g4
g5
NtRp3581
(dp3582
g8
S'auto_442'
p3583
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3584
(dp3585
g14
(lp3586
sbsg20
Nsg22
g3
(g23
g5
NtRp3587
(dp3588
g26
(lp3589
g3
(g4
g5
NtRp3590
(dp3591
g8
S'auto_440'
p3592
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3593
(dp3594
g14
(lp3595
(lp3596
(g70
I86
g71
S'input = input.flatten(2)'
tp3597
aasbsg20
Nsg22
g3
(g23
g5
NtRp3598
(dp3599
g26
(lp3600
g96
asg11
(itheano.gof.utils
scratchpad
p3601
(dp3602
bsg156
(lp3603
g3590
asg158
g1019
sbsg139
g1021
sbag3
(g1026
g5
NtRp3604
(dp3605
g8
S'auto_441'
p3606
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3607
(dp3608
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp3609
sbasg11
(itheano.gof.utils
scratchpad
p3610
(dp3611
bsg156
(lp3612
g3581
asg158
g3
(g1040
g5
NtRp3613
(dp3614
g1043
(g1331
(Ng1033
NtRp3615
tp3616
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3617
(dp3618
g143
(I00
tp3619
sg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g1026
g5
NtRp3620
(dp3621
g8
S'auto_443'
p3622
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3623
(dp3624
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3625
sbasg11
(itheano.gof.utils
scratchpad
p3626
(dp3627
bsg156
(lp3628
g3572
asg158
g3
(g1040
g5
NtRp3629
(dp3630
g1043
(g1033
tp3631
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3632
(dp3633
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3634
(dp3635
g8
S'auto_451'
p3636
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3637
(dp3638
g14
(lp3639
sbsg20
Nsg22
g3
(g23
g5
NtRp3640
(dp3641
g26
(lp3642
g3
(g132
g5
NtRp3643
(dp3644
g8
S'auto_445'
p3645
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3646
(dp3647
g138
Nsbsg20
Nsg240
I01
sg139
g3
(g140
g5
NtRp3648
(dp3649
g143
(tsg144
S'int8'
p3650
sg146
g1116
sg149
I00
sg20
Nsbsg150
g151
(g152
(I0
tS'b'
tRp3651
(I1
(tg1116
I00
S'\xff'
tbsbasg11
(itheano.gof.utils
scratchpad
p3652
(dp3653
bsg156
(lp3654
g3634
asg158
g3
(g1121
g5
NtRp3655
(dp3656
g1124
S'tensor.basic'
p3657
sg20
Nsg1126
g3
(ctheano.scalar.basic
Cast
p3658
g5
NtRp3659
(dp3660
g1130
g3
(ctheano.scalar.basic
specific_out
p3661
g5
NtRp3662
(dp3663
S'spec'
p3664
(g1033
tp3665
sbsg172
g173
sS'o_type'
p3666
g1033
sg20
S'convert_to_int64'
p3667
sS'ctor'
p3668
cnumpy
int64
p3669
sbsg1134
(dp3670
sg1136
Nsg1138
(dp3671
sS'__oplist_tags'
p3672
(lp3673
S'casting'
p3674
asg1140
I00
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3675
(dp3676
g143
(tsg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3677
(dp3678
bsg156
(lp3679
g3563
asg158
g3
(ctheano.tensor.opt
MakeVector
p3680
g5
NtRp3681
(dp3682
g144
S'int64'
p3683
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3684
(dp3685
g143
(I00
tp3686
sg144
g1024
sg146
g1025
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3687
(dp3688
bsg156
(lp3689
g87
asg158
g3
(ctheano.tensor.basic
Reshape
p3690
g5
NtRp3691
(dp3692
S'ndim'
p3693
I2
sg172
g173
sg20
Nsbsbsg139
g3
(g140
g5
NtRp3694
(dp3695
g143
(I00
I00
tp3696
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g1339
g5
NtRp3697
(dp3698
g8
S'auto_13'
p3699
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3700
(dp3701
g14
(lp3702
(lp3703
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp3704
aasbsg1350
g3
(g1351
g5
NtRp3705
(dp3706
g20
S'top_layer.W'
p3707
sg1355
(lp3708
g151
(g152
(I0
tS'b'
tRp3709
(I1
(I24
I2
tg244
I00
S'O\xcf0KWP\xe1\xbf\x89.\x19y\x0b\xc9\xe6?\xa9{ls\x8b\x8a\xe2\xbf\xfb\xda\xfc\xbe\xcb\x9d\xc5?Q\xa0\x9d\x0c\x83W\xe9?\x83\x01tTn\xd3\xd4\xbf\x00\x97e)\x88u\xe7?\xf3$\xe3"\x1c\x91\xd1\xbf\xbe\xf6\xaf\xdd=\x15\xc8?\xc2\x88:i\xb4_\xdc\xbf3\x92\xe2&\xa2\x94\x91\xbf\xe6\xa3\\\x04\x96\x93\xc3?0\x163\xc11\xf9j?\x00\xc3A[\x10\xd5\xe6\xbf0\xe9\xee\x9b\x04Q\xea\xbf\xd7#\xfc\x03\xddM\xea?\xce\xcd\xb8"\xe2d\xe4\xbfE\xb7\xa0\xba\xf3\x08\xcd?\x04\xa08j9\x03\xe2?\xe3\x1e-\xcd\xe8\xdc\xc1\xbfp.\xf9\x7f\xe9j\xcc?Ra\xd5\xc6.`\xe5?\xfc\xb0\xf6\xaetV\xd5\xbf\xc5A)\xb5\x8d\xe3\xd9?T\xcd\xfaq\x15\x97\xcb\xbfG\x93\x0b\x03Q[\xd9?,v\xca\x13\x8e#\xd2\xbf\xc8FcK\xf0\x8b\xc5?\xcb-M\xea\xd9\xca\xc3?\xadT\xe2m|\xaa\xcf\xbfov\xb3\xddM\xd9\x95\xbfvjt\tq]\xb8\xbf\xfc]\x89\x06=\x08\xd3?\xef\xc7\xef\xb1\xe1x\xe5\xbf4x\xfd\x89\xd9=\xc3\xbfC\xedE\x8e\x9c\x1d\xe2?\x15\xd9\x84;\x1c?\xc0\xbf\xc2\xf3\xbbze\xe1\xe8\xbf\x15\x8d\xd2\x07O\x88\xe3?6o\x86\xdc\xcb\x14\xd2?L\xb1\xfac\xfc\xc3\xd1?\xb7`\x18\xe3\x85\x03\xcb?l<x\x8b\xdc\x93\xe6?\x0e6\x98\x14\xfc\xb3\x8d?\xed&\xc8;R\x9a\xca?}8~1\x1f"\xb7\xbf!\xcf\x05\xb2\x1f\x10\xe5?\xa1\xec\xec\xbd^\xaa\xe0?'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp3710
(dp3711
g143
(I00
I00
tp3712
sg144
S'float64'
p3713
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g3707
sg22
Nsg139
g3710
sbasg11
(itheano.gof.utils
scratchpad
p3714
(dp3715
bsg156
(lp3716
g76
asg158
g3
(ctheano.tensor.basic
Dot
p3717
g5
NtRp3718
(dp3719
g172
g173
sbsbsg139
g3
(g140
g5
NtRp3720
(dp3721
g143
(I00
I00
tp3722
sg144
S'float64'
p3723
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3724
(dp3725
g8
S'auto_460'
p3726
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3727
(dp3728
g14
(lp3729
(lp3730
(g70
I90
g71
S"activation = activation + self.b.dimshuffle('x', 0)"
tp3731
aasbsg20
Nsg22
g3
(g23
g5
NtRp3732
(dp3733
g26
(lp3734
g3
(g1339
g5
NtRp3735
(dp3736
g8
S'auto_14'
p3737
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3738
(dp3739
g14
(lp3740
(lp3741
(g1347
I309
g1348
S'return theano.shared(arr, name=name)'
tp3742
aasbsg1350
g3
(g1351
g5
NtRp3743
(dp3744
g20
S'top_layer.b'
p3745
sg1355
(lp3746
g151
(g152
(I0
tS'b'
tRp3747
(I1
(I2
tg244
I00
S'U*\x82yl[\xae?V*\x82yl[\xae\xbf'
tbasg1358
I00
sg1359
I00
sg139
g3
(g140
g5
NtRp3748
(dp3749
g143
(I00
tp3750
sg144
S'float64'
p3751
sg146
g244
sg149
I00
sg20
Nsbsg1364
Nsbsg20
g3745
sg22
Nsg139
g3748
sbasg11
(itheano.gof.utils
scratchpad
p3752
(dp3753
bsg156
(lp3754
g3724
asg158
g3
(g159
g5
NtRp3755
(dp3756
g162
(lp3757
sg164
(lp3758
I0
asg166
(lp3759
I0
asg168
(I00
tp3760
sg169
I00
sg170
(S'x'
I0
tp3761
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3762
(dp3763
g143
(I01
I00
tp3764
sg144
g3751
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3765
(dp3766
bsg156
(lp3767
g63
asg158
g1122
sbsg139
g3
(g140
g5
NtRp3768
(dp3769
g143
(I00
I00
tp3770
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3771
(dp3772
bsg156
(lp3773
g50
asg158
g3
(ctheano.tensor.nnet.nnet
Softmax
p3774
g5
NtRp3775
(dp3776
g172
g173
sbsbsg139
g3768
sbag3
(g4
g5
NtRp3777
(dp3778
g8
S'auto_466'
p3779
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3780
(dp3781
g14
(lp3782
(lp3783
(g17
I278
g18
S"self.target_var = T.ivector('targets')"
tp3784
aasbsg20
S'targets'
p3785
sg22
Nsg139
g3
(g140
g5
NtRp3786
(dp3787
g143
(I00
tp3788
sg144
S'int32'
p3789
sg146
g147
(S'i4'
I0
I1
tRp3790
(I3
S'<'
NNNI-1
I-1
I0
tbsg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3791
(dp3792
bsg156
(lp3793
g37
asg158
g3
(ctheano.tensor.nnet.nnet
CrossentropyCategorical1Hot
p3794
g5
NtRp3795
(dp3796
g172
g173
sbsbsg139
g3
(g140
g5
NtRp3797
(dp3798
g143
(I00
tp3799
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3800
(dp3801
bsg156
(lp3802
g28
asg158
g3
(ctheano.tensor.elemwise
Sum
p3803
g5
NtRp3804
(dp3805
S'acc_dtype'
p3806
g534
sg144
g534
sg172
g173
sg1126
g1128
sS'axis'
p3807
Nsbsbsg139
g3
(g140
g5
NtRp3808
(dp3809
g143
(tsg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g4
g5
NtRp3810
(dp3811
g8
S'auto_474'
p3812
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3813
(dp3814
g14
(lp3815
sbsg20
Nsg22
g3
(g23
g5
NtRp3816
(dp3817
g26
(lp3818
g3
(g4
g5
NtRp3819
(dp3820
g8
S'auto_472'
p3821
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3822
(dp3823
g14
(lp3824
(lp3825
(g17
I281
g18
S'self.loss = loss.mean()'
tp3826
aasbsg20
Nsg22
g3
(g23
g5
NtRp3827
(dp3828
g26
(lp3829
g3
(g4
g5
NtRp3830
(dp3831
g8
S'auto_469'
p3832
sg10
I0
sg11
(itheano.gof.utils
scratchpad
p3833
(dp3834
g14
(lp3835
(lp3836
(g17
I281
g18
S'self.loss = loss.mean()'
tp3837
aasbsg20
Nsg22
g3
(g23
g5
NtRp3838
(dp3839
g26
(lp3840
g37
asg11
(itheano.gof.utils
scratchpad
p3841
(dp3842
bsg156
(lp3843
g3830
asg158
g1019
sbsg139
g1021
sbasg11
(itheano.gof.utils
scratchpad
p3844
(dp3845
bsg156
(lp3846
g3819
asg158
g3
(g1121
g5
NtRp3847
(dp3848
g1124
g3657
sg20
Nsg1126
g3
(g3658
g5
NtRp3849
(dp3850
g1130
g3
(g3661
g5
NtRp3851
(dp3852
g3664
(g3
(g1032
g5
NtRp3853
(dp3854
g144
g534
sbtp3855
sbsg172
g173
sg3666
g3853
sg20
S'convert_to_float64'
p3856
sg3668
cnumpy
float64
p3857
sbsg1134
(dp3858
sg1136
Nsg1138
(dp3859
sg3672
(lp3860
g3674
asg1140
I00
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3861
(dp3862
g143
(I00
tp3863
sg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbag3
(g1026
g5
NtRp3864
(dp3865
g8
S'auto_473'
p3866
sg10
Nsg11
(itheano.gof.utils
scratchpad
p3867
(dp3868
bsg20
Nsg139
g1033
sg150
g1035
(g1025
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp3869
sbasg11
(itheano.gof.utils
scratchpad
p3870
(dp3871
bsg156
(lp3872
g3810
asg158
g3
(g1040
g5
NtRp3873
(dp3874
g1043
(g1033
tp3875
sg172
g173
sbsbsg139
g3
(g140
g5
NtRp3876
(dp3877
g143
(tsg144
g534
sg146
g244
sg149
I00
sg20
Nsbsbasg11
(itheano.gof.utils
scratchpad
p3878
(dp3879
bsg156
(lp3880
g6
asg158
g3
(g1121
g5
NtRp3881
(dp3882
g1124
g1125
sg1126
g3
(ctheano.scalar.basic
TrueDiv
p3883
g5
NtRp3884
(dp3885
g1130
g1131
sg172
g173
sg20
S'true_div'
p3886
sbsg20
S'Elemwise{true_div,no_inplace}'
p3887
sg172
g173
sg1134
(dp3888
sg1136
(S'true_divide'
p3889
I2
I1
tp3890
sg1138
(dp3891
sg1140
I00
sg1141
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p3892
sbsbsg139
g3
(g140
g5
NtRp3893
(dp3894
g143
(tsg144
g534
sg146
g244
sg149
I00
sg20
NsbsbsS'network'
p3895
g3
(clasagne.layers.dense
DenseLayer
p3896
g5
NtRp3897
(dp3898
S'b'
g3735
sg20
S'top_layer'
p3899
sS'nonlinearity'
p3900
clasagne.nonlinearities
softmax
p3901
sS'input_shape'
p3902
(I2
I6
I2
I2
tp3903
sS'params'
p3904
ccollections
OrderedDict
p3905
((lp3906
(lp3907
g3697
ac__builtin__
set
p3908
((lp3909
S'trainable'
p3910
aS'regularizable'
p3911
atRp3912
aa(lp3913
g3735
ag3908
((lp3914
g3910
atRp3915
aatRp3916
sS'num_units'
p3917
I2
sS'W'
g3697
sS'input_layer'
p3918
g3
(clasagne.layers.pool
MaxPool2DLayer
p3919
g5
NtRp3920
(dp3921
g20
Nsg3902
(I2
I6
I5
I5
tp3922
sS'pool_size'
p3923
g3553
sS'stride'
p3924
g3553
sg3904
g3905
((ltRp3925
sg3918
g3
(clasagne.layers.conv
Conv2DLayer
p3926
g5
NtRp3927
(dp3928
S'b'
g2137
sg20
S'layer_3_unroll=1'
p3929
sg3900
clasagne.nonlinearities
rectify
p3930
sg3924
g1377
sg3902
(I2
I7
I5
I5
tp3931
sS'filter_size'
p3932
(I3
I3
tp3933
sg3904
g3905
((lp3934
(lp3935
g2099
ag3908
((lp3936
g3910
ag3911
atRp3937
aa(lp3938
g2137
ag3908
((lp3939
g3910
atRp3940
aatRp3941
sg3918
g3
(g3926
g5
NtRp3942
(dp3943
S'b'
g1777
sg20
S'layer_2_unroll=1'
p3944
sg3900
g3930
sg3924
g1377
sg3902
(I2
I4
I5
I5
tp3945
sg3932
(I3
I3
tp3946
sg3904
g3905
((lp3947
(lp3948
g1739
ag3908
((lp3949
g3910
ag3911
atRp3950
aa(lp3951
g1777
ag3908
((lp3952
g3910
atRp3953
aatRp3954
sg3918
g3
(g3926
g5
NtRp3955
(dp3956
S'b'
g1394
sg20
S'layer_1_unroll=1'
p3957
sg3900
g3930
sg3924
g1377
sg3902
(I2
I3
I5
I5
tp3958
sg3932
(I3
I3
tp3959
sg3904
g3905
((lp3960
(lp3961
g1340
ag3908
((lp3962
g3910
ag3911
atRp3963
aa(lp3964
g1394
ag3908
((lp3965
g3910
atRp3966
aatRp3967
sg3918
g3
(clasagne.layers.merge
ElemwiseMergeLayer
p3968
g5
NtRp3969
(dp3970
S'merge_function'
p3971
g1467
sg3904
g3905
((ltRp3972
sS'input_shapes'
p3973
(lp3974
g3958
a(I2
I3
I5
I5
tp3975
asg20
S"\\prod {['input', 'loop_layer_1_unroll=0']}"
p3976
sS'input_layers'
p3977
(lp3978
g3
(clasagne.layers.input
InputLayer
p3979
g5
NtRp3980
(dp3981
S'shape'
p3982
g3958
sg3904
g3905
((ltRp3983
sg20
NsS'input_var'
p3984
g520
sbag3
(g3926
g5
NtRp3985
(dp3986
S'b'
g2497
sg20
S'loop_layer_1_unroll=0'
p3987
sg3900
g3930
sg3924
g1377
sg3902
(I2
I6
I5
I5
tp3988
sg3932
(I3
I3
tp3989
sg3904
g3905
((lp3990
(lp3991
g2459
ag3908
((lp3992
g3910
ag3911
atRp3993
aa(lp3994
g2497
ag3908
((lp3995
g3910
atRp3996
aatRp3997
sg3918
g3
(g3926
g5
NtRp3998
(dp3999
S'b'
g2137
sg20
S'layer_3_unroll=0'
p4000
sg3900
g3930
sg3924
g1377
sg3902
(I2
I7
I5
I5
tp4001
sg3932
(I3
I3
tp4002
sg3904
g3905
((lp4003
(lp4004
g2099
ag3908
((lp4005
g3910
ag3911
atRp4006
aa(lp4007
g2137
ag3908
((lp4008
g3910
atRp4009
aatRp4010
sg3918
g3
(g3926
g5
NtRp4011
(dp4012
S'b'
g1777
sg20
S'layer_2_unroll=0'
p4013
sg3900
g3930
sg3924
g1377
sg3902
(I2
I4
I5
I5
tp4014
sg3932
(I3
I3
tp4015
sg3904
g3905
((lp4016
(lp4017
g1739
ag3908
((lp4018
g3910
ag3911
atRp4019
aa(lp4020
g1777
ag3908
((lp4021
g3910
atRp4022
aatRp4023
sg3918
g3
(g3926
g5
NtRp4024
(dp4025
S'b'
g1394
sg20
S'layer_1_unroll=0'
p4026
sg3900
g3930
sg3924
g1377
sg3902
g3958
sg3932
(I3
I3
tp4027
sg3904
g3905
((lp4028
(lp4029
g1340
ag3908
((lp4030
g3910
ag3911
atRp4031
aa(lp4032
g1394
ag3908
((lp4033
g3910
atRp4034
aatRp4035
sg3918
g3980
sS'W'
g1340
sS'num_filters'
p4036
I4
sg219
(I1
I1
tp4037
sS'untie_biases'
p4038
I00
sS'convolution'
p4039
ctheano.tensor.nnet
conv2d
p4040
sbsS'W'
g1739
sg4036
I7
sg219
(I1
I1
tp4041
sg4038
I00
sg4039
g4040
sbsS'W'
g2099
sg4036
I6
sg219
(I1
I1
tp4042
sg4038
I00
sg4039
g4040
sbsS'W'
g2459
sg4036
I3
sg219
(I1
I1
tp4043
sg4038
I00
sg4039
g4040
sbasbsS'W'
g1340
sg4036
I4
sg219
(I1
I1
tp4044
sg4038
I00
sg4039
g4040
sbsS'W'
g1739
sg4036
I7
sg219
(I1
I1
tp4045
sg4038
I00
sg4039
g4040
sbsS'W'
g2099
sg4036
I6
sg219
(I1
I1
tp4046
sg4038
I00
sg4039
g4040
sbsg3558
I01
sg219
g3555
sg3556
g3557
sbsbsS'target_var'
p4047
g3777
sg3904
(lp4048
g1340
ag1394
ag1739
ag1777
ag2099
ag2137
ag2459
ag2497
ag3697
ag3735
asg3984
g520
sS'trained_epochs'
p4049
I24
s.
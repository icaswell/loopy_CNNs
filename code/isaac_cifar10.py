# Isaac's playground

import os, struct
from array import array as pyarray
from numpy import append, array, int8, uint8, zeros
import numpy as np
from data_utils import load_cifar10
from loopy_network_lasagne import LoopyNetwork
import util 

# model = LoopyNetwork(architecture_fpath="../architectures/mnist_c3_c5_sm.py", n_unrolls=1, batch_size=36)
model = LoopyNetwork(architecture_fpath="../architectures/cifar_isaac.py", n_unrolls=3)
print repr(model)

X_train, y_train, X_val, y_val, X_test, y_test = load_cifar10()


print X_train.shape, y_train.shape
print X_test.shape, y_test.shape

check_error_n_batches = 300
# {'valid_loss': [2.5343996457010842, 2.9012743346577712], 'full_train_acc': [0.28983706720977559, 0.28790224032586531], 'valid_acc': [0.32454545454545453, 0.25909090909090904], 'batchly_train_loss': [0.47203663368443016, 0.54681487231933501, 0.52149416939605997, 0.59006567162572654, 0.60149003564757142, 0.73627321762650455, 0.58971784962362217, 0.63611178406035418, 0.58683678889872648, 0.70796268244480443, 12.200196719647492], 'cumulative_train_loss': [0.47361531807802359, 0.51027619666298707, 0.51401968033364587, 0.53304703428495848, 0.54674476637887759, 0.66632283429801353, 0.62795639790015456, 0.63067788382680634, 0.61970846891569387, 0.63737108670003906], 'full_train_loss': [2.9029781469558329, 2.9844368904480092]}
saved_checkpoint = "../saved_models/cifar_c3-32_c3-64_c3-64_c3-1_fc_Mar--4-13:23:41-2016_epoch=1"
# {'valid_loss': [2.6255675883547629, 2.7371699618371435, 2.7953210496099921, 2.4598740838470059, 2.5853121980289782, 2.3735162725621439, 2.6085029506515105, 2.4714528589816309], 'full_train_acc': [0.32221995926680258, 0.34651731160896199, 0.33959266802444044, 0.35050916496945073, 0.36910386965376724, 0.37529531568227936, 0.32340122199592691, 0.36415478615071334], 'valid_acc': [0.43818181818181823, 0.28454545454545455, 0.30272727272727273, 0.37545454545454554, 0.37272727272727268, 0.33636363636363636, 0.26818181818181819, 0.39272727272727276], 'batchly_train_loss': [0.66123655295044648, 0.63723119114979299, 0.64497008696356162, 0.63713074972929018, 0.6415572910052052, 0.64208787217875662, 0.70672418747193788, 0.63564147594173637, 0.57127919873613509, 0.57910822893088909, 0.84082003631044799, 0.6709764420447818, 0.71951308627202859, 0.6933013186983974, 0.70314065196117981, 0.82196242802188402, 0.71489551837028675, 0.73432185849086362, 0.68716691123904461, 0.69425484869619714, 0.84538458019208051, 0.69331533562002901, 0.55545316809027767, 0.6043920205636647, 0.62647565281066264, 0.75754960757277412, 0.65541966912829475, 0.63641363571223875, 0.76158315633790874, 0.71513739382265207, 0.83531518217175404, 0.67898746226697893, 0.62970024578337414, 0.60367261580445242, 0.65135316419220224, 0.85236601459028205, 0.66085249107511379, 0.59443780764880427, 0.61273514555182518, 0.72968378627352593, 23.155314384270479], 'cumulative_train_loss': [0.663448012993759, 0.65031771824719853, 0.6485331916786875, 0.64568020370135826, 0.64485507107370876, 0.59509217134667758, 0.65100136139271747, 0.64587570440128894, 0.62721102408473695, 0.61758404706929027, 0.77884721816346592, 0.72482178772005112, 0.72305025219790675, 0.7156068159594976, 0.71311191989579215, 0.74264766822878181, 0.72874842789898431, 0.73060830462597348, 0.71973889844075356, 0.71463868835178246, 0.77482016999549919, 0.73399971872230751, 0.67441799993520102, 0.65689690417918656, 0.6508085950327176, 0.69857850771404617, 0.67696306267944628, 0.66343155201185733, 0.6879899183986925, 0.69342303556159257, 0.75466976804201746, 0.71676544127655561, 0.68771142720764056, 0.66668420166889408, 0.66361594867155738, 0.78419683449294009, 0.72242170423359453, 0.67971295120196196, 0.6629545344421276, 0.67630928797743062], 'full_train_loss': [2.8148378493854773, 2.446750552942301, 2.4715283973844229, 2.2629925538897955, 2.610274289441016, 2.4000405049783216, 2.4048560060095792, 2.4145086532297038]}
saved_checkpoint = "../saved_models/cifar_c3-32_c3-64_c3-64_c3-1_fc_Mar--4-17:14:12-2016_epoch=8"
# model.load_model(saved_checkpoint)
        
history = model.train_model(X_train, y_train, X_test, y_test, 
						batchsize=32,
						n_epochs=8,
						use_expensive_stats=False,
					    check_error_n_batches=check_error_n_batches)
print history


util.plot_loss_acc(history["full_train_loss"], history["full_train_acc"], history["valid_acc"], "batches*%s"%check_error_n_batches, attributes={"isaac": np.random.rand()})